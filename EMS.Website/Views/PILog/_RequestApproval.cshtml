@using EMS.Web.Models.Others
@using EMS.Core
@model PILogApprovalDto

@using (Html.BeginForm("requestapproval", "pilog", FormMethod.Post, new { id = "approve-pilogForm" }))
{
    var isCancelled = Model.Status == (byte)Enums.PILogStatus.Cancelled;
    <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">×</span></button>

        <div class="row">
            <div class="col-md-5">
                <h4 class="modal-title">PI Log</h4>
            </div>
            <div class="col-md-6 text-right">
                <h4 class="modal-title" style="font-size:15px;">
                    @*@(Model.Status == (byte)Enums.PILogStatus.Pending ? Model.CreateDate : Model.ModifyDate) [ @((Enums.PILogStatus)Model.Status) by @Model.ModifyBy ]*@

                    @(Model.Status == (byte)Enums.PILogStatus.Pending ? Model.CreateDate : Model.ModifyDate) [ @((Enums.PILogStatus)Model.Status) @(Model.Status == (byte)Enums.PILogStatus.Pending ? string.Empty : $" by {Model.ModifyBy}") ]

                </h4>
            </div>
        </div>
    </div>

    <div class="modal-body">
        <div id="NotificationMessage"></div>

        @Html.HiddenFor(model => model.Id)

        <div class="row form-group">
            <div class="col-md-4">
                @Html.LabelFor(model => model.CreateBy) :
            </div>
            <div class="col-md-8">
                @Model.CreateBy
            </div>
        </div>

        <div class="row form-group">
            <div class="col-md-4">
                @Html.LabelFor(model => model.ProcessName) :
            </div>
            <div class="col-md-8">
                @Model.ProcessName
            </div>
        </div>

        <div class="row form-group">
            <div class="col-md-4">
                @Html.Label(Model.PotentialArea,"Potential Improvement Area") :
            </div>
            <div class="col-md-8">
                @Html.Raw(Model.PotentialArea)
            </div>
        </div>

        @*@Html.LabelFor(model => model.PotentialArea)
        <div class="form-group">
            @Html.Raw(Model.PotentialArea)
        </div>*@

        @if (Model.ApprovalAllowed)
        {
            <div class="row form-group">
                <div class="col-md-4">
                    @Html.LabelFor(model => model.Status) :
                </div>
                <div class="col-md-8">
                    @Html.DropDownListFor(model => model.Status, Model.StatusList, "-Select-", htmlAttributes: new { @class = "form-control", @style="width: 20%;" })
                </div>
            </div>

            <div id="divEstimatedSchedule" class="row form-group hidden">
                <div class="col-md-4">
                    @Html.LabelFor(model => model.EstimatedSchedule,"Estimated Schedule To RollOut") :
                </div>
                <div class="col-md-8">
                    @Html.TextBoxFor(model => model.EstimatedSchedule, htmlAttributes: new { @class = "form-control", @autoComplete = "off", data_msg_required = "Estimated Schedule Date is required", data_rule_required = "true", @disabled = "disabled" })
                </div>
            </div>

            <div id="divRemarks">
                <div class="row form-group">
                    <div class="col-md-4">
                        @Html.LabelFor(model => model.Remarks) :
                    </div>
                    <div class="col-md-8">
                        @Html.TextAreaFor(model => model.Remarks, 5, 10, htmlAttributes: new { @class = "form-control", data_msg_required = "Remarks is required", data_rule_required = "true" })
                    </div>
                </div>
            </div>

            <div id="divCancelReason" class="row form-group hidden">
                <div class="col-md-4">
                    @Html.LabelFor(model => model.CancelReason) :
                </div>
                <div class="col-md-8">
                    @Html.TextAreaFor(model => model.CancelReason, 5, 10, htmlAttributes: new { @class = "form-control", @disabled = "disabled", data_msg_required = "Cancel Reason is required", data_rule_required = "true" })
                </div>
            </div>
        }
        else
        {
            <div class="row form-group @(isCancelled || Model.Status == (byte)Enums.PILogStatus.InProcess ? "hidden" : "")">
                <div class="col-md-4">
                    @Html.LabelFor(model => model.EstimatedSchedule, "Estimated Schedule To RollOut") :
                </div>
                <div class="col-md-8">
                    @Model.EstimatedSchedule
                </div>
            </div>

            <div class="row form-group @(isCancelled ? "hidden" : "")">
                <div class="col-md-4">
                    @Html.LabelFor(model => model.Remarks) :
                </div>
                <div class="col-md-8">
                    @Html.Raw(Model.Remarks.NewLineToHtmlBreak())
                </div>
            </div>

            <div class="@(isCancelled ? "" : "hidden")">
                @Html.LabelFor(model => model.CancelReason)<br />
                @Html.Raw(Model.CancelReason.NewLineToHtmlBreak())
            </div>
        }
    </div>

    if (Model.ApprovalAllowed)
    {
        Html.RenderPartial("_ModalFooter", new ModalFooter());
    }
    else if (Model.RollOutAllowed)
    {
        <div class="modal-footer">
            <button data-dismiss="modal" id="btn-cancel" class="btn btn-custom pull-right" type="button">Cancel</button>
            <button class="btn btn-custom pull-right margin-right10" id="btn-rollOut" type="submit" style="background-color:#249507"><i class="fa fa-check"></i> Roll Out</button>
        </div>
    }
}