// <auto-generated />
using System;
using EMS.Data.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EMS.Data.Migrations
{
    [DbContext(typeof(db_dsmanagementnewContext))]
    [Migration("20181226134226_DOWN")]
    partial class DOWN
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EMS.Data.Model.AbroadPm", b =>
                {
                    b.Property<int>("AutoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AutoID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.HasKey("AutoId")
                        .HasName("PK__AbroadPM__6B232965597B3B93");

                    b.ToTable("AbroadPM");
                });

            modelBuilder.Entity("EMS.Data.Model.AlertMessage", b =>
                {
                    b.Property<int>("AlertId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<bool?>("IsActive");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Uid");

                    b.HasKey("AlertId");

                    b.HasIndex("Uid");

                    b.ToTable("AlertMessage");
                });

            modelBuilder.Entity("EMS.Data.Model.AlertMessageRead", b =>
                {
                    b.Property<int>("AlertReadId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddDate")
                        .HasColumnType("datetime");

                    b.Property<int>("AlertId");

                    b.Property<bool?>("IsRead");

                    b.Property<int>("Uid");

                    b.HasKey("AlertReadId");

                    b.HasIndex("AlertId");

                    b.HasIndex("Uid");

                    b.ToTable("AlertMessageRead");
                });

            modelBuilder.Entity("EMS.Data.Model.Appraisal", b =>
                {
                    b.Property<int>("AppraisalId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Ip")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IP")
                        .HasDefaultValueSql("('0.0.0.0')")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsCommit")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsCommitTl")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsCommitTL")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("PeriodEnd")
                        .HasColumnType("date");

                    b.Property<DateTime>("PeriodStart")
                        .HasColumnType("date");

                    b.Property<int>("Uid");

                    b.HasKey("AppraisalId");

                    b.HasIndex("Uid");

                    b.ToTable("Appraisal");
                });

            modelBuilder.Entity("EMS.Data.Model.AppraisalExtras", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("AppraisalId");

                    b.Property<string>("Comments")
                        .HasMaxLength(1000);

                    b.Property<string>("Ip")
                        .HasColumnName("IP")
                        .HasMaxLength(50);

                    b.Property<string>("Tlcomments")
                        .HasColumnName("TLComments")
                        .HasMaxLength(1000);

                    b.Property<int?>("TluserId")
                        .HasColumnName("TLUserId");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AppraisalId");

                    b.ToTable("AppraisalExtras");
                });

            modelBuilder.Entity("EMS.Data.Model.AvailUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("DateModify")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IP")
                        .HasDefaultValueSql("('127.0.0.1')")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsCurrent")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("Uid")
                        .HasColumnName("UID");

                    b.Property<int>("UserId")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("Uid");

                    b.HasIndex("UserId");

                    b.ToTable("AvailUser");
                });

            modelBuilder.Entity("EMS.Data.Model.BloodGroup", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("BloodGroup");
                });

            modelBuilder.Entity("EMS.Data.Model.BucketModel", b =>
                {
                    b.Property<int>("BucketId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Ip")
                        .HasColumnName("IP")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsActive");

                    b.Property<string>("ModelCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.HasKey("BucketId");

                    b.HasIndex("ModelCode")
                        .IsUnique()
                        .HasName("unique_modelcode");

                    b.HasIndex("ModelName")
                        .IsUnique()
                        .HasName("IX_BucketModel");

                    b.ToTable("BucketModel");
                });

            modelBuilder.Entity("EMS.Data.Model.CadidateExam", b =>
                {
                    b.Property<int>("CexamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CExamID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CandidateId")
                        .HasColumnName("CandidateID");

                    b.Property<DateTime>("DateOfExam")
                        .HasColumnType("date");

                    b.Property<int>("ExamId")
                        .HasColumnName("ExamID");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IP")
                        .HasDefaultValueSql("('127.0.0.1')")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool>("IsComplete");

                    b.HasKey("CexamId")
                        .HasName("PK__Cadidate__D484C60C3449B6E4");

                    b.HasIndex("CandidateId");

                    b.HasIndex("ExamId");

                    b.ToTable("CadidateExam");
                });

            modelBuilder.Entity("EMS.Data.Model.Candidate", b =>
                {
                    b.Property<int>("CandidateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CandidateID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Contact")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Ip")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IP")
                        .HasDefaultValueSql("('127.0.0.1')")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("ModifyDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("CandidateId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("uc_Candidate");

                    b.ToTable("Candidate");
                });

            modelBuilder.Entity("EMS.Data.Model.CandidateAnswer", b =>
                {
                    b.Property<int>("CanswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CAnswerID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Canswer")
                        .HasColumnName("CAnswer")
                        .HasMaxLength(2000);

                    b.Property<int>("CquestionId")
                        .HasColumnName("CQuestionId");

                    b.HasKey("CanswerId")
                        .HasName("PK__Candidat__22973C3B3BEAD8AC");

                    b.HasIndex("CquestionId");

                    b.ToTable("CandidateAnswer");
                });

            modelBuilder.Entity("EMS.Data.Model.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Address")
                        .HasColumnType("ntext");

                    b.Property<string>("Email")
                        .HasMaxLength(200);

                    b.Property<string>("Ip")
                        .HasColumnName("IP")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsActive");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Msn")
                        .HasColumnName("MSN")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Phone")
                        .HasMaxLength(50);

                    b.Property<int?>("Pmuid")
                        .HasColumnName("PMUid");

                    b.HasKey("ClientId");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("EMS.Data.Model.Communication", b =>
                {
                    b.Property<int>("Cid")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<string>("Ip")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IP")
                        .HasDefaultValueSql("('0.0.0.0')")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsActive");

                    b.Property<bool?>("IsDelete");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .HasMaxLength(200);

                    b.HasKey("Cid");

                    b.ToTable("Communication");
                });

            modelBuilder.Entity("EMS.Data.Model.CompanyDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DepartmentId");

                    b.Property<string>("DocumentName")
                        .HasMaxLength(250);

                    b.Property<string>("DocumentPath")
                        .HasMaxLength(500);

                    b.Property<string>("Heading")
                        .HasMaxLength(250);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("CompanyDocument");
                });

            modelBuilder.Entity("EMS.Data.Model.Component", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ComponentCategoryId");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedByUid");

                    b.Property<string>("DataUrl");

                    b.Property<string>("Description");

                    b.Property<string>("DesignImages")
                        .HasMaxLength(200);

                    b.Property<string>("ImageName")
                        .HasMaxLength(250);

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("PsdImages")
                        .HasMaxLength(200);

                    b.Property<string>("Tags")
                        .HasMaxLength(500);

                    b.Property<string>("Title")
                        .HasMaxLength(250);

                    b.Property<byte>("Type");

                    b.HasKey("Id");

                    b.HasIndex("ComponentCategoryId");

                    b.HasIndex("CreatedByUid");

                    b.ToTable("Component");
                });

            modelBuilder.Entity("EMS.Data.Model.ComponentCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("ComponentCategory");
                });

            modelBuilder.Entity("EMS.Data.Model.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CurrName")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("CurrSign")
                        .IsRequired()
                        .HasMaxLength(3);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<int>("OrderBy");

                    b.HasKey("Id");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("EMS.Data.Model.CurrentOpening", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DepartmentId");

                    b.Property<string>("Ip")
                        .HasColumnName("IP")
                        .HasMaxLength(100);

                    b.Property<bool?>("IsActive");

                    b.Property<string>("MinExperience")
                        .HasColumnName("Min_Experience")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Post")
                        .HasMaxLength(150);

                    b.Property<string>("SmallDescription")
                        .HasColumnName("Small_Description");

                    b.Property<string>("Technology")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("CurrentOpening");
                });

            modelBuilder.Entity("EMS.Data.Model.DailyThought", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Thought1")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<string>("Thought2")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("DailyThought");
                });

            modelBuilder.Entity("EMS.Data.Model.Department", b =>
                {
                    b.Property<int>("DeptId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Deptcode")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<string>("Ip")
                        .HasColumnName("IP")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.HasKey("DeptId");

                    b.HasIndex("Deptcode")
                        .IsUnique()
                        .HasName("UQ__Departme__AC900526263B8EAF");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("IX_Department")
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("EMS.Data.Model.DesignerManagement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("AddedUid")
                        .HasColumnName("AddedUID");

                    b.Property<int>("AssignUid")
                        .HasColumnName("AssignUID");

                    b.Property<string>("DesignerDesription")
                        .IsUnicode(false);

                    b.Property<bool?>("IsPaid");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("ProjectId");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("TaskCompletedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("TaskTime");

                    b.HasKey("Id");

                    b.HasIndex("AddedUid");

                    b.HasIndex("AssignUid");

                    b.HasIndex("ProjectId");

                    b.ToTable("DesignerManagement");
                });

            modelBuilder.Entity("EMS.Data.Model.DeviceCategory", b =>
                {
                    b.Property<int>("DeviceCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DeviceCategoryname")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("DeviceCategoryId");

                    b.ToTable("DeviceCategory");
                });

            modelBuilder.Entity("EMS.Data.Model.DeviceDeviceHistory", b =>
                {
                    b.Property<int>("DeviceDeviceHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("DeviceDeviceInfoId");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("StartDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("SubmitApproved");

                    b.Property<int>("SubmitedBy");

                    b.Property<int?>("SubmitedTo");

                    b.Property<int?>("Uid");

                    b.HasKey("DeviceDeviceHistoryId");

                    b.HasIndex("DeviceDeviceInfoId");

                    b.HasIndex("Uid");

                    b.ToTable("DeviceDeviceHistory");
                });

            modelBuilder.Entity("EMS.Data.Model.DeviceDeviceInfo", b =>
                {
                    b.Property<int>("DeviceDeviceInfoId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DeviceCategoryId");

                    b.Property<string>("DeviceDeviceInfoName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("PmId");

                    b.Property<int?>("Quantity");

                    b.HasKey("DeviceDeviceInfoId");

                    b.HasIndex("DeviceCategoryId");

                    b.HasIndex("PmId");

                    b.ToTable("DeviceDeviceInfo");
                });

            modelBuilder.Entity("EMS.Data.Model.DomainType", b =>
                {
                    b.Property<int>("DomainId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DomainName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Ip")
                        .HasColumnName("IP")
                        .HasMaxLength(100);

                    b.HasKey("DomainId")
                        .HasName("PK__DomainTy__2498D75020CCCE1C");

                    b.ToTable("DomainType");
                });

            modelBuilder.Entity("EMS.Data.Model.ElanceAssignedJob", b =>
                {
                    b.Property<decimal>("ElanceAssignedJobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18, 0)")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("ElanceJobId")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<int>("UserId");

                    b.HasKey("ElanceAssignedJobId");

                    b.HasIndex("ElanceJobId");

                    b.HasIndex("UserId");

                    b.ToTable("ElanceAssignedJob");
                });

            modelBuilder.Entity("EMS.Data.Model.ElanceCredential", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccessToken")
                        .HasColumnName("Access_token")
                        .HasMaxLength(100);

                    b.Property<string>("ElanceClientId")
                        .HasMaxLength(50);

                    b.Property<string>("ElanceClientSecret")
                        .HasMaxLength(50);

                    b.Property<string>("ElanceCode")
                        .HasMaxLength(100);

                    b.Property<string>("RedirectUri")
                        .HasColumnName("RedirectURI")
                        .HasMaxLength(100);

                    b.Property<string>("RefreshToken")
                        .HasColumnName("Refresh_token")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("ElanceCredential");
                });

            modelBuilder.Entity("EMS.Data.Model.ElanceJobDetails", b =>
                {
                    b.Property<decimal>("ElanceJobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18, 0)")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Budget")
                        .HasMaxLength(50);

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("ClientCountry")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ClientCountryCode")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("ClientName")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<decimal?>("ClientUserId")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("ntext");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsAwarded")
                        .HasColumnName("isAwarded");

                    b.Property<bool?>("IsAwardedTii")
                        .HasColumnName("IsAwardedTII");

                    b.Property<bool?>("IsFirstResponse");

                    b.Property<decimal>("JobId")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<string>("JobName")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("JobUrl")
                        .HasColumnName("JobURL")
                        .HasMaxLength(500);

                    b.Property<int?>("NumProposals");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Subcategory")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("ElanceJobId");

                    b.ToTable("ElanceJobDetails");
                });

            modelBuilder.Entity("EMS.Data.Model.EmpLateActivity", b =>
                {
                    b.Property<int>("ElactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ELActId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DateModify")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("ElactDate")
                        .HasColumnName("ELActDate")
                        .HasColumnType("date");

                    b.Property<string>("ElactTime")
                        .HasColumnName("ELActTime")
                        .HasMaxLength(10);

                    b.Property<string>("Ip")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IP")
                        .HasDefaultValueSql("('127.0.0.1')")
                        .HasMaxLength(20);

                    b.Property<int?>("Uid");

                    b.HasKey("ElactId")
                        .HasName("PK__EmpLateA__F7CCFFA621A0F6C4");

                    b.HasIndex("Uid");

                    b.ToTable("EmpLateActivity");
                });

            modelBuilder.Entity("EMS.Data.Model.EmployeeActivity", b =>
                {
                    b.Property<int>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("AppraisalId");

                    b.Property<string>("Comments")
                        .HasColumnType("ntext");

                    b.Property<int>("EmployeeUid");

                    b.Property<string>("Ip")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IP")
                        .HasDefaultValueSql("('0.0.0.0')")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Type");

                    b.Property<int?>("TypeAns");

                    b.Property<int?>("TypeId");

                    b.Property<int>("Uid");

                    b.HasKey("ActivityId");

                    b.ToTable("EmployeeActivity");
                });

            modelBuilder.Entity("EMS.Data.Model.EmployeeAnswers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("AppraisalId");

                    b.Property<string>("Comments")
                        .HasColumnType("ntext");

                    b.Property<string>("Ip")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IP")
                        .HasDefaultValueSql("('0.0.0.0')")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Qid");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AppraisalId");

                    b.HasIndex("Qid");

                    b.ToTable("EmployeeAnswers");
                });

            modelBuilder.Entity("EMS.Data.Model.EmployeeAppraise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("AppraiseType");

                    b.Property<string>("ClientComment")
                        .HasColumnType("ntext");

                    b.Property<DateTime?>("ClientDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("EmployeeId");

                    b.Property<string>("Ip")
                        .HasColumnName("IP")
                        .HasMaxLength(100);

                    b.Property<bool?>("IsActive");

                    b.Property<bool?>("IsDelete");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TlComment")
                        .HasColumnType("ntext");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("EmployeeAppraise");
                });

            modelBuilder.Entity("EMS.Data.Model.EmployeeComplaint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ClientComment")
                        .HasColumnType("ntext");

                    b.Property<DateTime?>("ClientDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ComplainType");

                    b.Property<string>("EmpComment")
                        .HasColumnType("ntext");

                    b.Property<DateTime?>("EmpDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("EmployeeId");

                    b.Property<string>("Ip")
                        .HasColumnName("IP")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsActive");

                    b.Property<bool?>("IsDelete");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Priority")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("TlComment")
                        .HasColumnType("ntext");

                    b.Property<DateTime?>("Tldate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TLDate")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("EmployeeComplaint");
                });

            modelBuilder.Entity("EMS.Data.Model.EmployeeFeedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LeavingDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Lfprofile")
                        .HasColumnName("LFProfile");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ReviewLink")
                        .HasMaxLength(100);

                    b.Property<string>("Suggestion");

                    b.Property<int>("Uid");

                    b.HasKey("Id");

                    b.HasIndex("Uid");

                    b.ToTable("EmployeeFeedback");
                });

            modelBuilder.Entity("EMS.Data.Model.EmployeeFeedbackRank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("EmployeeFeedbackRank");
                });

            modelBuilder.Entity("EMS.Data.Model.EmployeeFeedbackRankStatus", b =>
                {
                    b.Property<int>("EmployeeFeedbackRankId");

                    b.Property<int>("EmployeeFeedbackId");

                    b.Property<byte>("FeedBackStatus");

                    b.HasKey("EmployeeFeedbackRankId", "EmployeeFeedbackId", "FeedBackStatus");

                    b.HasIndex("EmployeeFeedbackId");

                    b.ToTable("EmployeeFeedbackRankStatus");
                });

            modelBuilder.Entity("EMS.Data.Model.EmployeeFeedbackReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("EmployeeFeedbackReason");
                });

            modelBuilder.Entity("EMS.Data.Model.EmployeeFeedbackReasonMapping", b =>
                {
                    b.Property<int>("EmployeeFeedbackId");

                    b.Property<int>("EmployeeFeedbackReasonId");

                    b.HasKey("EmployeeFeedbackId", "EmployeeFeedbackReasonId");

                    b.HasIndex("EmployeeFeedbackReasonId");

                    b.ToTable("EmployeeFeedbackReasonMapping");
                });

            modelBuilder.Entity("EMS.Data.Model.EmployeeMedicalData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Designation")
                        .HasMaxLength(200);

                    b.Property<DateTime>("Dob")
                        .HasColumnName("DOB")
                        .HasColumnType("date");

                    b.Property<string>("EmployeeCode")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<byte>("Gender");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<bool?>("ShowRelative");

                    b.Property<byte>("Title");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("EmployeeMedicalData");
                });

            modelBuilder.Entity("EMS.Data.Model.EmployeeProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("AppraisalId");

                    b.Property<string>("Comments")
                        .HasColumnType("ntext");

                    b.Property<string>("Ip")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IP")
                        .HasDefaultValueSql("('0.0.0.0')")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("ModifyDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("PeriodFrom")
                        .HasColumnType("date");

                    b.Property<DateTime?>("PeriodTo")
                        .HasColumnType("date");

                    b.Property<int?>("ProjectId");

                    b.Property<int?>("Role");

                    b.Property<string>("Tlcomments")
                        .HasColumnName("TLComments")
                        .HasColumnType("ntext");

                    b.Property<string>("Tlstatus")
                        .HasColumnName("TLStatus")
                        .HasMaxLength(100);

                    b.Property<int>("UserId");

                    b.Property<int?>("Year");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("Role");

                    b.ToTable("EmployeeProject");
                });

            modelBuilder.Entity("EMS.Data.Model.EmployeeRelativeMedicalData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Dob")
                        .HasColumnName("DOB")
                        .HasColumnType("date");

                    b.Property<int>("EmployeeMedicalId");

                    b.Property<byte>("Gender");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<byte>("Relation");

                    b.Property<byte>("Title");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeMedicalId");

                    b.ToTable("EmployeeRelativeMedicalData");
                });

            modelBuilder.Entity("EMS.Data.Model.EstimateDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("DocumentPath")
                        .HasMaxLength(400);

                    b.Property<int?>("EstimateTimeInDays");

                    b.Property<string>("Industry")
                        .HasMaxLength(400);

                    b.Property<bool?>("IsSpam");

                    b.Property<int?>("LeadId");

                    b.Property<string>("MockupDocument")
                        .HasMaxLength(500);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("OtherDocument")
                        .HasMaxLength(500);

                    b.Property<string>("Tags")
                        .HasMaxLength(400);

                    b.Property<string>("Technology")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int?>("UidUploadedBy")
                        .HasColumnName("Uid_UploadedBy");

                    b.Property<string>("WireframeMockupsDoc")
                        .HasColumnName("Wireframe_MockupsDoc")
                        .HasMaxLength(300);

                    b.HasKey("Id");

                    b.HasIndex("LeadId");

                    b.HasIndex("UidUploadedBy");

                    b.ToTable("EstimateDocument");
                });

            modelBuilder.Entity("EMS.Data.Model.ExamQuestion", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IP")
                        .HasDefaultValueSql("('127.0.0.1')")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("ModifyDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<int>("QuestionLevel");

                    b.Property<int>("QuestionType");

                    b.Property<int?>("TechnologyId")
                        .HasColumnName("TechnologyID");

                    b.HasKey("QuestionId")
                        .HasName("PK__ExamQues__0DC06FAC0A537D18");

                    b.HasIndex("QuestionLevel");

                    b.HasIndex("QuestionType");

                    b.HasIndex("TechnologyId");

                    b.ToTable("ExamQuestion");
                });

            modelBuilder.Entity("EMS.Data.Model.ExamQuestionAnswerDetail", b =>
                {
                    b.Property<int>("Qaid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QAId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("Ip")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IP")
                        .HasDefaultValueSql("('127.0.0.1')")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("IsCorrect")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("ModifyDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("QuestId")
                        .HasColumnName("QuestID");

                    b.HasKey("Qaid")
                        .HasName("PK__ExamQues__DFA593A014D10B8B");

                    b.HasIndex("QuestId");

                    b.ToTable("ExamQuestionAnswerDetail");
                });

            modelBuilder.Entity("EMS.Data.Model.ExamQuestionDetail", b =>
                {
                    b.Property<int>("Eqid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EQID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ExamId")
                        .HasColumnName("ExamID");

                    b.Property<int>("QuestionId")
                        .HasColumnName("QuestionID");

                    b.HasKey("Eqid")
                        .HasName("PK__ExamQues__288E09E125077354");

                    b.HasIndex("QuestionId");

                    b.HasIndex("ExamId", "QuestionId")
                        .IsUnique()
                        .HasName("uc_ExamQuestionDetail");

                    b.ToTable("ExamQuestionDetail");
                });

            modelBuilder.Entity("EMS.Data.Model.Examination", b =>
                {
                    b.Property<int>("ExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ExamID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ExamCode")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Ip")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IP")
                        .HasDefaultValueSql("('127.0.0.1')")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("MaxTime")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime>("ModifyDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ExamId")
                        .HasName("PK__Examinat__297521A71D66518C");

                    b.ToTable("Examination");
                });

            modelBuilder.Entity("EMS.Data.Model.Forecasting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("AddedPersonUid")
                        .HasColumnName("AddedPersonUId");

                    b.Property<int>("ChasingType");

                    b.Property<int?>("ClientId");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Groups")
                        .HasMaxLength(250);

                    b.Property<int?>("LeadId");

                    b.Property<int?>("NoOfDeveloper");

                    b.Property<string>("ProjectDescription")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<int?>("ProjectId");

                    b.Property<int?>("Status");

                    b.Property<DateTime?>("TentiveDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AddedPersonUid");

                    b.HasIndex("ClientId");

                    b.HasIndex("LeadId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Forecasting");
                });

            modelBuilder.Entity("EMS.Data.Model.ForumFeedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Feedback");

                    b.Property<int?>("ForumId");

                    b.Property<bool?>("IsActive");

                    b.Property<bool?>("IsDelete");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ForumId");

                    b.HasIndex("UserId");

                    b.ToTable("ForumFeedback");
                });

            modelBuilder.Entity("EMS.Data.Model.Forums", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("ntext");

                    b.Property<string>("Ip")
                        .HasColumnName("IP")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsActive");

                    b.Property<bool?>("IsClosed");

                    b.Property<bool?>("IsDelete");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Subject")
                        .HasColumnName("subject")
                        .HasMaxLength(500);

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Forums");
                });

            modelBuilder.Entity("EMS.Data.Model.FrontMenu", b =>
                {
                    b.Property<int>("MenuId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ChildPages")
                        .HasMaxLength(1000);

                    b.Property<DateTime?>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DateModify")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Ip")
                        .HasColumnName("IP")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("MenuDisplayName")
                        .HasMaxLength(200);

                    b.Property<string>("MenuName")
                        .HasMaxLength(200);

                    b.Property<string>("PageName")
                        .HasMaxLength(200);

                    b.Property<int?>("ParentId");

                    b.HasKey("MenuId")
                        .HasName("PK_Menus");

                    b.ToTable("FrontMenu");
                });

            modelBuilder.Entity("EMS.Data.Model.FullLeave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Adjustment");

                    b.Property<int?>("AppraisalId");

                    b.Property<int?>("Approved");

                    b.Property<string>("Ip")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IP")
                        .HasDefaultValueSql("('0.0.0.0')")
                        .HasMaxLength(50);

                    b.Property<int?>("NotApproved");

                    b.Property<int?>("TotalLeave");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AppraisalId");

                    b.HasIndex("UserId");

                    b.ToTable("FullLeave");
                });

            modelBuilder.Entity("EMS.Data.Model.HalfLeave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Adjustment");

                    b.Property<int?>("AppraisalId");

                    b.Property<int?>("Approved");

                    b.Property<string>("Ip")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IP")
                        .HasDefaultValueSql("('0.0.0.0')")
                        .HasMaxLength(50);

                    b.Property<int?>("NotApproved");

                    b.Property<int?>("TotalLeave");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AppraisalId");

                    b.HasIndex("UserId");

                    b.ToTable("HalfLeave");
                });

            modelBuilder.Entity("EMS.Data.Model.IntwExperience", b =>
                {
                    b.Property<int>("IntwExperienceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Experience")
                        .HasMaxLength(50);

                    b.HasKey("IntwExperienceId");

                    b.ToTable("IntwExperience");
                });

            modelBuilder.Entity("EMS.Data.Model.IntwQues", b =>
                {
                    b.Property<decimal>("IntwQuesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18, 0)")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("IntwQuestypeId");

                    b.Property<int?>("IntwTechnologyId");

                    b.Property<bool?>("IsActive");

                    b.Property<DateTime?>("Modifydate")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .HasMaxLength(500);

                    b.HasKey("IntwQuesId");

                    b.HasIndex("IntwQuestypeId");

                    b.HasIndex("IntwTechnologyId");

                    b.ToTable("IntwQues");
                });

            modelBuilder.Entity("EMS.Data.Model.IntwQuesExp", b =>
                {
                    b.Property<int>("IntwQuesExpId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("IntwExperienceId");

                    b.Property<decimal?>("IntwQuesId")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<bool?>("Isactive");

                    b.HasKey("IntwQuesExpId");

                    b.HasIndex("IntwExperienceId");

                    b.HasIndex("IntwQuesId");

                    b.ToTable("IntwQuesExp");
                });

            modelBuilder.Entity("EMS.Data.Model.IntwQuestype", b =>
                {
                    b.Property<int>("IntwQuestypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Marks")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<string>("TypeName")
                        .HasMaxLength(50);

                    b.HasKey("IntwQuestypeId");

                    b.ToTable("IntwQuestype");
                });

            modelBuilder.Entity("EMS.Data.Model.IntwQusOptions", b =>
                {
                    b.Property<int>("IntwQusOptionsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("IntwQuesId")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<bool?>("Iscorrect");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("OptionTitle")
                        .HasMaxLength(500);

                    b.HasKey("IntwQusOptionsId");

                    b.HasIndex("IntwQuesId");

                    b.ToTable("IntwQusOptions");
                });

            modelBuilder.Entity("EMS.Data.Model.IntwTechnology", b =>
                {
                    b.Property<int>("IntwTechnologyId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsActive");

                    b.Property<int?>("NoOfMultipleQues");

                    b.Property<int?>("NoOfQues");

                    b.Property<string>("TechnologyName")
                        .HasMaxLength(50);

                    b.HasKey("IntwTechnologyId");

                    b.ToTable("IntwTechnology");
                });

            modelBuilder.Entity("EMS.Data.Model.IntwUser", b =>
                {
                    b.Property<int>("IntwUserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Address");

                    b.Property<string>("EmailId")
                        .HasColumnName("EmailID")
                        .HasMaxLength(100);

                    b.Property<int?>("IntwTechnologyId");

                    b.Property<string>("Mobile")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Modifydate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<int?>("TotalAttempt");

                    b.Property<string>("UserResume")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.HasKey("IntwUserId");

                    b.HasIndex("EmailId")
                        .IsUnique()
                        .HasName("UQ__IntwUser__7ED91AEE2D67AF2B")
                        .HasFilter("[EmailID] IS NOT NULL");

                    b.HasIndex("IntwTechnologyId");

                    b.ToTable("IntwUser");
                });

            modelBuilder.Entity("EMS.Data.Model.IntwUserAnswer", b =>
                {
                    b.Property<int>("IntwUserAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("IntwQusOptionsId");

                    b.Property<int?>("IntwUserId");

                    b.Property<decimal?>("IntwUserQuesId")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<int?>("IntwUserSessionId");

                    b.HasKey("IntwUserAnswerId");

                    b.HasIndex("IntwQusOptionsId");

                    b.HasIndex("IntwUserId");

                    b.HasIndex("IntwUserQuesId");

                    b.HasIndex("IntwUserSessionId");

                    b.ToTable("IntwUserAnswer");
                });

            modelBuilder.Entity("EMS.Data.Model.IntwUserQues", b =>
                {
                    b.Property<decimal>("IntwUserQuesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18, 0)")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Adddate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("IntwQuesid")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<int?>("IntwUserSessionid");

                    b.Property<int?>("IntwUserid");

                    b.HasKey("IntwUserQuesId");

                    b.HasIndex("IntwQuesid");

                    b.HasIndex("IntwUserSessionid");

                    b.HasIndex("IntwUserid");

                    b.ToTable("IntwUserQues");
                });

            modelBuilder.Entity("EMS.Data.Model.IntwUserSession", b =>
                {
                    b.Property<int>("IntwUserSessionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("IntwQuesExpId");

                    b.Property<int?>("IntwUserId");

                    b.Property<int?>("MarksObtained");

                    b.Property<bool?>("Result");

                    b.Property<string>("Status")
                        .HasMaxLength(50);

                    b.Property<int?>("TotalMarks");

                    b.Property<int?>("TotalQues");

                    b.Property<int?>("TotalTime");

                    b.HasKey("IntwUserSessionId");

                    b.HasIndex("IntwQuesExpId");

                    b.HasIndex("IntwUserId");

                    b.ToTable("IntwUserSession");
                });

            modelBuilder.Entity("EMS.Data.Model.JobReference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Attacchment")
                        .HasMaxLength(250);

                    b.Property<int?>("CurrentOpeningId");

                    b.Property<string>("Email")
                        .HasMaxLength(150);

                    b.Property<string>("Ip")
                        .HasColumnName("IP")
                        .HasMaxLength(50);

                    b.Property<string>("MobileNo")
                        .HasMaxLength(20);

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(150);

                    b.Property<int?>("ReferByUserLoginId")
                        .HasColumnName("ReferBy_UserLoginId");

                    b.Property<string>("SmallDesc")
                        .HasColumnName("Small_Desc");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CurrentOpeningId");

                    b.HasIndex("ReferByUserLoginId");

                    b.ToTable("JobReference");
                });

            modelBuilder.Entity("EMS.Data.Model.KnowledgeBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .HasMaxLength(500);

                    b.Property<string>("Instructions")
                        .HasColumnType("text");

                    b.Property<int>("KnowledgeType")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Title")
                        .HasMaxLength(500);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("KnowledgeBase");
                });

            modelBuilder.Entity("EMS.Data.Model.KnowledgeDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CodeId");

                    b.Property<int>("DeptId")
                        .HasColumnName("DeptID");

                    b.HasKey("Id");

                    b.HasIndex("CodeId");

                    b.HasIndex("DeptId");

                    b.ToTable("KnowledgeDepartment");
                });

            modelBuilder.Entity("EMS.Data.Model.KnowledgeTech", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CodeId");

                    b.Property<int>("TechId");

                    b.HasKey("Id");

                    b.HasIndex("CodeId");

                    b.HasIndex("TechId");

                    b.ToTable("KnowledgeTech");
                });

            modelBuilder.Entity("EMS.Data.Model.LateHour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DayOfDate")
                        .HasColumnType("date");

                    b.Property<TimeSpan?>("EarlyLeaveTimeDiff");

                    b.Property<TimeSpan?>("LateStartTimeDiff");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<int>("ModifiedByUid");

                    b.Property<int>("Uid");

                    b.HasKey("Id");

                    b.HasIndex("ModifiedByUid");

                    b.HasIndex("Uid");

                    b.ToTable("LateHour");
                });

            modelBuilder.Entity("EMS.Data.Model.LeadClient", b =>
                {
                    b.Property<int>("LeadClientId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<int>("Pmuid")
                        .HasColumnName("PMUid");

                    b.HasKey("LeadClientId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("UQ_Email");

                    b.ToTable("LeadClient");
                });

            modelBuilder.Entity("EMS.Data.Model.LeadStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Bcc")
                        .HasColumnName("BCC")
                        .HasMaxLength(500);

                    b.Property<string>("Cc")
                        .HasColumnName("CC")
                        .HasMaxLength(500);

                    b.Property<string>("FromEmail")
                        .HasMaxLength(100);

                    b.Property<string>("Ip")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IP")
                        .HasDefaultValueSql("('127.0.0.1')")
                        .HasMaxLength(50);

                    b.Property<string>("MailContent")
                        .HasColumnType("ntext");

                    b.Property<DateTime>("ModifyDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("ParentId");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<string>("To")
                        .HasMaxLength(500);

                    b.HasKey("StatusId")
                        .HasName("PK__LeadStat__C8EE20634F67C174");

                    b.HasIndex("StatusName")
                        .IsUnique()
                        .HasName("UQ__LeadStat__05E7698A52442E1F");

                    b.ToTable("LeadStatus");
                });

            modelBuilder.Entity("EMS.Data.Model.LeadTechnician", b =>
                {
                    b.Property<int>("AutoId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LeadId");

                    b.Property<int>("TechnicianId");

                    b.HasKey("AutoId")
                        .HasName("PK__LeadTech__6B2329057775B2CE");

                    b.HasIndex("TechnicianId");

                    b.HasIndex("LeadId", "TechnicianId")
                        .IsUnique()
                        .HasName("UQ_LeadId_TechnicianId");

                    b.ToTable("LeadTechnician");
                });

            modelBuilder.Entity("EMS.Data.Model.LeadTechnicianArchive", b =>
                {
                    b.Property<int>("AutoId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LeadId");

                    b.Property<int>("TechnicianId");

                    b.HasKey("AutoId")
                        .HasName("PK__LeadTech__6B2329055EE9FC26");

                    b.HasIndex("LeadId");

                    b.HasIndex("TechnicianId");

                    b.ToTable("LeadTechnicianArchive");
                });

            modelBuilder.Entity("EMS.Data.Model.LeadTransaction", b =>
                {
                    b.Property<int>("TransId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("AddedBy");

                    b.Property<string>("Doc")
                        .HasMaxLength(300);

                    b.Property<int>("LeadId");

                    b.Property<string>("Notes")
                        .HasColumnType("ntext");

                    b.Property<int>("StatusId");

                    b.HasKey("TransId")
                        .HasName("PK__LeadTran__9E5DDB3C0C70CFB4");

                    b.HasIndex("AddedBy");

                    b.HasIndex("LeadId");

                    b.HasIndex("StatusId");

                    b.ToTable("LeadTransaction");
                });

            modelBuilder.Entity("EMS.Data.Model.LeadTransactionArchive", b =>
                {
                    b.Property<int>("TransId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("AddedBy");

                    b.Property<string>("Doc")
                        .HasMaxLength(300);

                    b.Property<int>("LeadId");

                    b.Property<string>("Notes")
                        .HasColumnType("ntext");

                    b.Property<int>("StatusId");

                    b.HasKey("TransId")
                        .HasName("PK__LeadTran__9E5DDB3C5748DA5E");

                    b.HasIndex("AddedBy");

                    b.HasIndex("LeadId");

                    b.HasIndex("StatusId");

                    b.ToTable("LeadTransactionArchive");
                });

            modelBuilder.Entity("EMS.Data.Model.Leadership", b =>
                {
                    b.Property<int>("Lid")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<string>("Ip")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IP")
                        .HasDefaultValueSql("('0.0.0.0')")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsActive");

                    b.Property<bool?>("IsDelete");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .HasMaxLength(200);

                    b.HasKey("Lid");

                    b.ToTable("Leadership");
                });

            modelBuilder.Entity("EMS.Data.Model.LeaveActivity", b =>
                {
                    b.Property<int>("LeaveId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdjustId")
                        .HasColumnName("AdjustID");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Ip")
                        .HasColumnName("IP")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsHalf");

                    b.Property<int?>("LeaveType");

                    b.Property<string>("Reason")
                        .HasColumnType("ntext");

                    b.Property<string>("Remark")
                        .HasColumnType("ntext");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<int?>("Status");

                    b.Property<int>("Uid");

                    b.Property<int?>("WorkAlterId")
                        .HasColumnName("WorkAlterID");

                    b.Property<string>("WorkAlternator")
                        .HasColumnType("ntext");

                    b.HasKey("LeaveId")
                        .HasName("PK_LeaveStatus");

                    b.HasIndex("AdjustId");

                    b.HasIndex("LeaveType");

                    b.HasIndex("Status");

                    b.HasIndex("Uid");

                    b.HasIndex("WorkAlterId");

                    b.ToTable("LeaveActivity");
                });

            modelBuilder.Entity("EMS.Data.Model.LeaveActivityAdjust", b =>
                {
                    b.Property<int>("LeaveActivityAdjustId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Adjustid");

                    b.Property<int?>("LeaveId");

                    b.HasKey("LeaveActivityAdjustId");

                    b.HasIndex("Adjustid");

                    b.HasIndex("LeaveId");

                    b.ToTable("LeaveActivityAdjust");
                });

            modelBuilder.Entity("EMS.Data.Model.LeaveAdjust", b =>
                {
                    b.Property<int>("AdjustId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClhalfAdjustId")
                        .HasColumnName("CLHalfAdjustId");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Ip")
                        .HasColumnName("IP")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsCancel")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsCl")
                        .HasColumnName("IsCL");

                    b.Property<bool?>("IsHalf");

                    b.Property<bool?>("Isadjust")
                        .HasColumnName("isadjust");

                    b.Property<string>("Reason")
                        .HasColumnType("ntext");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("Uid");

                    b.HasKey("AdjustId");

                    b.HasIndex("Uid");

                    b.ToTable("LeaveAdjust");
                });

            modelBuilder.Entity("EMS.Data.Model.Management", b =>
                {
                    b.Property<int>("Mid")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<string>("Ip")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IP")
                        .HasDefaultValueSql("('0.0.0.0')")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsActive");

                    b.Property<bool?>("IsDelete");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .HasMaxLength(200);

                    b.HasKey("Mid");

                    b.ToTable("Management");
                });

            modelBuilder.Entity("EMS.Data.Model.MeetingMinutes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionPoint")
                        .HasColumnType("ntext");

                    b.Property<DateTime?>("AddedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Discussed")
                        .HasColumnType("ntext");

                    b.Property<bool?>("IsDelete");

                    b.Property<DateTime?>("MeetingDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MeetingSubject")
                        .HasMaxLength(1000);

                    b.Property<string>("PmandTl")
                        .HasColumnName("PMandTL")
                        .HasMaxLength(700);

                    b.HasKey("Id");

                    b.ToTable("MeetingMinutes");
                });

            modelBuilder.Entity("EMS.Data.Model.MenuAccess", b =>
                {
                    b.Property<int>("AccessId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MenuId");

                    b.Property<int>("RoleId");

                    b.HasKey("AccessId");

                    b.HasIndex("MenuId");

                    b.HasIndex("RoleId");

                    b.ToTable("MenuAccess");
                });

            modelBuilder.Entity("EMS.Data.Model.OfficialLeave", b =>
                {
                    b.Property<int>("LeaveId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("CountryId");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("LeaveDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LeaveType")
                        .HasMaxLength(500);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("LeaveId")
                        .HasName("PK__Official__796DB9593548C815");

                    b.ToTable("OfficialLeave");
                });

            modelBuilder.Entity("EMS.Data.Model.PersonalDevelopment", b =>
                {
                    b.Property<int>("PdId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<string>("Ip")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IP")
                        .HasDefaultValueSql("('0.0.0.0')")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsActive");

                    b.Property<bool?>("IsDelete");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .HasMaxLength(200);

                    b.HasKey("PdId");

                    b.ToTable("PersonalDevelopment");
                });

            modelBuilder.Entity("EMS.Data.Model.PfreviewQuarter", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("EndMonth");

                    b.Property<string>("QuarterName")
                        .HasMaxLength(50);

                    b.Property<int?>("QuarterNumber");

                    b.Property<int>("StartMonth");

                    b.HasKey("Id");

                    b.ToTable("PFReviewQuarter");
                });

            modelBuilder.Entity("EMS.Data.Model.PfreviewQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("ReviewCategory")
                        .HasMaxLength(250);

                    b.Property<string>("ReviewQuestion");

                    b.Property<byte>("RoleType");

                    b.Property<byte>("SkillType");

                    b.HasKey("Id");

                    b.ToTable("PFReviewQuestion");
                });

            modelBuilder.Entity("EMS.Data.Model.PfreviewResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<byte>("PfreviewAnswer")
                        .HasColumnName("PFReviewAnswer");

                    b.Property<int>("PfreviewQuestionId")
                        .HasColumnName("PFReviewQuestionId");

                    b.Property<int>("PfreviewSubmittedId")
                        .HasColumnName("PFReviewSubmittedId");

                    b.HasKey("Id");

                    b.HasIndex("PfreviewQuestionId");

                    b.HasIndex("PfreviewSubmittedId");

                    b.ToTable("PFReviewResult");
                });

            modelBuilder.Entity("EMS.Data.Model.PfreviewSubmitted", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsSatisfied");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<int>("ReviewByUid")
                        .HasColumnName("ReviewBy_Uid");

                    b.Property<int>("ReviewOnUid")
                        .HasColumnName("ReviewOn_Uid");

                    b.Property<int>("ReviewQuarter");

                    b.Property<int?>("ReviewYear");

                    b.Property<decimal>("Score")
                        .HasColumnName("score")
                        .HasColumnType("decimal(5, 2)");

                    b.HasKey("Id");

                    b.HasIndex("ReviewByUid");

                    b.HasIndex("ReviewOnUid");

                    b.HasIndex("ReviewQuarter");

                    b.ToTable("PFReviewSubmitted");
                });

            modelBuilder.Entity("EMS.Data.Model.Portfolio", b =>
                {
                    b.Property<int>("PortfolioId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("CrmprojectId")
                        .HasColumnName("CRMProjectId");

                    b.Property<int>("DeveloperId");

                    b.Property<string>("Ip")
                        .HasColumnName("IP")
                        .HasMaxLength(100);

                    b.Property<bool>("IsNda")
                        .HasColumnName("IsNDA");

                    b.Property<bool>("IsScratch");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasColumnType("ntext");

                    b.Property<string>("Status")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<int?>("Uid");

                    b.Property<string>("WebsiteName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("WebsiteUrl")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("PortfolioId");

                    b.HasIndex("DeveloperId");

                    b.ToTable("Portfolio");
                });

            modelBuilder.Entity("EMS.Data.Model.PortfolioDomain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DomainId");

                    b.Property<int>("PortfolioId")
                        .HasColumnName("PortfolioID");

                    b.HasKey("Id");

                    b.HasIndex("DomainId");

                    b.HasIndex("PortfolioId");

                    b.ToTable("Portfolio_Domain");
                });

            modelBuilder.Entity("EMS.Data.Model.PortfolioTech", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PortfolioId")
                        .HasColumnName("PortfolioID");

                    b.Property<int>("TechId");

                    b.HasKey("Id");

                    b.HasIndex("PortfolioId");

                    b.HasIndex("TechId");

                    b.ToTable("Portfolio_Tech");
                });

            modelBuilder.Entity("EMS.Data.Model.Preferences", b =>
                {
                    b.Property<int>("PreferenceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActivityRefreshTime");

                    b.Property<DateTime>("AddDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("ElactTimeLimit")
                        .HasColumnName("ELActTimeLimit");

                    b.Property<string>("EmailDeveloper")
                        .HasMaxLength(3000)
                        .IsUnicode(false);

                    b.Property<string>("EmailFrom")
                        .HasMaxLength(3000);

                    b.Property<string>("EmailHr")
                        .HasColumnName("EmailHR")
                        .HasMaxLength(3000);

                    b.Property<string>("EmailPm")
                        .HasColumnName("EmailPM")
                        .HasMaxLength(3000);

                    b.Property<string>("InductionDoc")
                        .HasMaxLength(200);

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("Pmid")
                        .HasColumnName("pmid");

                    b.Property<int?>("PriorLeaveDay");

                    b.Property<string>("ProjectClosureEmail")
                        .HasMaxLength(255);

                    b.Property<int?>("TimeSheetDay");

                    b.Property<string>("TimeSheetEmail")
                        .HasMaxLength(3000);

                    b.HasKey("PreferenceId")
                        .HasName("PK__Preferen__E228496F0E04126B");

                    b.ToTable("Preferences");
                });

            modelBuilder.Entity("EMS.Data.Model.Productivity", b =>
                {
                    b.Property<int>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<string>("Ip")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IP")
                        .HasDefaultValueSql("('0.0.0.0')")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsActive");

                    b.Property<bool?>("IsDelete");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .HasMaxLength(200);

                    b.HasKey("Pid");

                    b.ToTable("Productivity");
                });

            modelBuilder.Entity("EMS.Data.Model.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AbroadPmuid")
                        .HasColumnName("AbroadPMUid");

                    b.Property<int>("ActualDevelopers");

                    b.Property<DateTime?>("AddDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("BillingTeam")
                        .HasMaxLength(50);

                    b.Property<int?>("ClientId");

                    b.Property<int>("CrmprojectId")
                        .HasColumnName("CRMProjectId");

                    b.Property<int?>("EstimateTime");

                    b.Property<string>("Ip")
                        .HasColumnName("IP")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsClosed")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("Model");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<string>("Notes")
                        .HasColumnType("ntext");

                    b.Property<int?>("Pmuid")
                        .HasColumnName("PMUid");

                    b.Property<string>("ProjectDetailsDoc")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<int?>("Uid");

                    b.HasKey("ProjectId");

                    b.HasIndex("AbroadPmuid");

                    b.HasIndex("ClientId");

                    b.HasIndex("Model");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("EMS.Data.Model.ProjectClose", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientName")
                        .HasMaxLength(250);

                    b.Property<string>("ClosureId")
                        .HasColumnName("ClosureID")
                        .HasMaxLength(50);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Crmid")
                        .HasColumnName("CRMID")
                        .HasMaxLength(50);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("Reason");

                    b.HasKey("Id");

                    b.ToTable("ProjectClose");
                });

            modelBuilder.Entity("EMS.Data.Model.ProjectClosure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddedBy");

                    b.Property<int?>("ClientQuality");

                    b.Property<string>("Country")
                        .HasMaxLength(100);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int?>("Crmstatus")
                        .HasColumnName("CRMStatus");

                    b.Property<DateTime?>("DateofClosing")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("NextStartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("OtherActualDeveloper")
                        .HasMaxLength(500);

                    b.Property<int?>("Pmid")
                        .HasColumnName("PMID");

                    b.Property<int?>("ProjectId")
                        .HasColumnName("ProjectID");

                    b.Property<string>("ProjectLiveUrl")
                        .HasMaxLength(500);

                    b.Property<string>("ProjectUrlAbsenseReason")
                        .HasMaxLength(500);

                    b.Property<string>("Reason");

                    b.Property<int>("Status");

                    b.Property<string>("Suggestion");

                    b.Property<int?>("UidBa")
                        .HasColumnName("Uid_BA");

                    b.Property<int?>("UidDev")
                        .HasColumnName("Uid_Dev");

                    b.Property<int?>("UidTl")
                        .HasColumnName("Uid_TL");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UidBa");

                    b.HasIndex("UidDev");

                    b.HasIndex("UidTl");

                    b.ToTable("ProjectClosure");
                });

            modelBuilder.Entity("EMS.Data.Model.ProjectClosureDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddedByUid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("NextStartDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ProjectClosureId");

                    b.Property<string>("Reason");

                    b.HasKey("Id");

                    b.HasIndex("AddedByUid");

                    b.HasIndex("ProjectClosureId");

                    b.ToTable("ProjectClosureDetail");
                });

            modelBuilder.Entity("EMS.Data.Model.ProjectDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeptId")
                        .HasColumnName("DeptID");

                    b.Property<int>("ProjectId")
                        .HasColumnName("ProjectID");

                    b.HasKey("Id");

                    b.HasIndex("DeptId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Project_Department");
                });

            modelBuilder.Entity("EMS.Data.Model.ProjectDeveloper", b =>
                {
                    b.Property<int>("ProjectDeveloperId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProjectDeveloperID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnName("IP")
                        .HasMaxLength(50);

                    b.Property<int>("ProjectId");

                    b.Property<string>("Remark")
                        .HasColumnType("ntext");

                    b.Property<Guid>("TransId");

                    b.Property<int?>("Uid");

                    b.Property<int?>("VdId")
                        .HasColumnName("VD_id");

                    b.Property<int>("WorkStatus");

                    b.HasKey("ProjectDeveloperId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("Uid");

                    b.HasIndex("VdId");

                    b.HasIndex("WorkStatus");

                    b.ToTable("ProjectDeveloper");
                });

            modelBuilder.Entity("EMS.Data.Model.ProjectDeveloperAddon", b =>
                {
                    b.Property<int>("ProjectId");

                    b.Property<int>("Uid");

                    b.Property<Guid>("TransId");

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnName("IP")
                        .HasMaxLength(50);

                    b.Property<bool>("IsCurrent");

                    b.Property<string>("Remark")
                        .HasColumnType("ntext");

                    b.Property<int>("WorkRole");

                    b.Property<int>("WorkStatus");

                    b.HasKey("ProjectId", "Uid", "TransId");

                    b.HasIndex("Uid");

                    b.HasIndex("WorkRole");

                    b.HasIndex("WorkStatus");

                    b.ToTable("ProjectDeveloperAddon");
                });

            modelBuilder.Entity("EMS.Data.Model.ProjectInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Country")
                        .HasMaxLength(100);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("CurrencyId")
                        .HasColumnName("CurrencyID");

                    b.Property<decimal>("InvoiceAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("InvoiceEndDate")
                        .HasColumnType("date");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("InvoiceStartDate")
                        .HasColumnType("date");

                    b.Property<int>("InvoiceStatus");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<int?>("Pmid")
                        .HasColumnName("PMID");

                    b.Property<int>("ProjectId");

                    b.Property<int?>("UidBa")
                        .HasColumnName("Uid_BA");

                    b.Property<int?>("UidTl")
                        .HasColumnName("Uid_TL");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UidBa");

                    b.HasIndex("UidTl");

                    b.ToTable("ProjectInvoice");
                });

            modelBuilder.Entity("EMS.Data.Model.ProjectInvoiceComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ChaseDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("InvoiceComments");

                    b.Property<int>("ProjectInvoiceId");

                    b.HasKey("Id");

                    b.HasIndex("ProjectInvoiceId");

                    b.ToTable("ProjectInvoiceComment");
                });

            modelBuilder.Entity("EMS.Data.Model.ProjectLead", b =>
                {
                    b.Property<int>("LeadId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AbroadPmid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AbroadPMID")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("AddDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ChaseRequests");

                    b.Property<int>("CommunicatorId");

                    b.Property<string>("Conclusion")
                        .HasMaxLength(1000);

                    b.Property<int?>("EstimateTimeinDay");

                    b.Property<string>("InitalRequirement")
                        .HasMaxLength(300);

                    b.Property<string>("Ip")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IP")
                        .HasDefaultValueSql("('127.0.0.1')")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsNewClient")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsUnread");

                    b.Property<bool?>("Isdelivered")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("LeadClientId");

                    b.Property<string>("LeadCrmid")
                        .HasColumnName("LeadCRMId")
                        .HasMaxLength(20);

                    b.Property<int>("LeadType");

                    b.Property<string>("MockupDocument")
                        .HasMaxLength(500);

                    b.Property<DateTime>("ModifyDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("NextChasedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasColumnType("ntext");

                    b.Property<string>("OtherDocument")
                        .HasMaxLength(500);

                    b.Property<int>("OwnerId");

                    b.Property<int?>("Pmid")
                        .HasColumnName("PMID");

                    b.Property<string>("ProposalDocument")
                        .HasMaxLength(300);

                    b.Property<DateTime?>("QuoteSubmittedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Remark");

                    b.Property<int>("Status");

                    b.Property<DateTime?>("StatusUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Tag")
                        .HasMaxLength(100);

                    b.Property<string>("Technologies")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("TitleCheckSum");

                    b.Property<string>("WireframeMockupsDoc")
                        .HasColumnName("Wireframe_MockupsDoc")
                        .HasMaxLength(300);

                    b.HasKey("LeadId")
                        .HasName("PK__ProjectL__73EF78FA58F12BAE");

                    b.HasIndex("AbroadPmid");

                    b.HasIndex("CommunicatorId");

                    b.HasIndex("LeadClientId");

                    b.HasIndex("LeadType");

                    b.HasIndex("OwnerId");

                    b.HasIndex("Status");

                    b.HasIndex("TitleCheckSum")
                        .IsUnique()
                        .HasName("UQ__ProjectL__508FDAD217E28260");

                    b.ToTable("ProjectLead");
                });

            modelBuilder.Entity("EMS.Data.Model.ProjectLeadArchive", b =>
                {
                    b.Property<int>("LeadId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AbroadPmid")
                        .HasColumnName("AbroadPMID");

                    b.Property<DateTime>("AddDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ChaseRequests");

                    b.Property<int>("CommunicatorId");

                    b.Property<string>("Conclusion")
                        .HasMaxLength(1000);

                    b.Property<int?>("EstimateTimeinDay");

                    b.Property<string>("InitalRequirement")
                        .HasMaxLength(300);

                    b.Property<string>("Ip")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IP")
                        .HasDefaultValueSql("('127.0.0.1')")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsNewClient")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsUnread");

                    b.Property<bool?>("Isdelivered");

                    b.Property<int?>("LeadClientId");

                    b.Property<int>("LeadType");

                    b.Property<DateTime>("ModifyDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Notes")
                        .HasColumnType("ntext");

                    b.Property<int>("OwnerId");

                    b.Property<DateTime?>("QuoteSubmittedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Status");

                    b.Property<DateTime?>("StatusUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Technologies")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("TitleCheckSum");

                    b.HasKey("LeadId")
                        .HasName("PK__ProjectL__73EF78FA3C94E422");

                    b.HasIndex("AbroadPmid");

                    b.HasIndex("CommunicatorId");

                    b.HasIndex("LeadClientId");

                    b.HasIndex("LeadType");

                    b.HasIndex("OwnerId");

                    b.HasIndex("Status");

                    b.ToTable("ProjectLeadArchive");
                });

            modelBuilder.Entity("EMS.Data.Model.ProjectLeadTech", b =>
                {
                    b.Property<int>("ProjectLeadTechId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LeadId");

                    b.Property<int>("TechId");

                    b.HasKey("ProjectLeadTechId");

                    b.HasIndex("LeadId");

                    b.HasIndex("TechId");

                    b.ToTable("ProjectLeadTech");
                });

            modelBuilder.Entity("EMS.Data.Model.ProjectLeadTechArchive", b =>
                {
                    b.Property<int>("ProjectLeadTechId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LeadId");

                    b.Property<int>("TechId");

                    b.HasKey("ProjectLeadTechId")
                        .HasName("PK__ProjectL__B97F51824BD727B2");

                    b.HasIndex("LeadId");

                    b.HasIndex("TechId");

                    b.ToTable("ProjectLeadTechArchive");
                });

            modelBuilder.Entity("EMS.Data.Model.ProjectPm", b =>
                {
                    b.Property<int>("ProjectId");

                    b.Property<int>("UserId");

                    b.HasKey("ProjectId", "UserId")
                        .HasName("PK__ProjectP__A76232342DDCB077");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectPM");
                });

            modelBuilder.Entity("EMS.Data.Model.ProjectTech", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProjectId")
                        .HasColumnName("ProjectID");

                    b.Property<int>("TechId");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TechId");

                    b.ToTable("Project_Tech");
                });

            modelBuilder.Entity("EMS.Data.Model.Questions", b =>
                {
                    b.Property<int>("Qid")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("Ip")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IP")
                        .HasDefaultValueSql("('0.0.0.0')")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsActive");

                    b.Property<bool?>("IsDelete");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .HasMaxLength(500);

                    b.HasKey("Qid");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("EMS.Data.Model.ReadMessage", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateRead")
                        .HasColumnType("datetime");

                    b.Property<int?>("ForumId");

                    b.Property<string>("Ip")
                        .HasColumnName("IP")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsRead");

                    b.Property<int?>("Uid");

                    b.HasKey("MessageId");

                    b.HasIndex("ForumId");

                    b.HasIndex("Uid");

                    b.ToTable("ReadMessage");
                });

            modelBuilder.Entity("EMS.Data.Model.Relationship", b =>
                {
                    b.Property<int>("Rid")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<string>("Ip")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IP")
                        .HasDefaultValueSql("('0.0.0.0')")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsActive");

                    b.Property<bool?>("IsDelete");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .HasMaxLength(200);

                    b.HasKey("Rid")
                        .HasName("PK_Relationships");

                    b.ToTable("Relationship");
                });

            modelBuilder.Entity("EMS.Data.Model.ReportBug", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ImageName")
                        .HasMaxLength(200);

                    b.Property<string>("Ip")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IP")
                        .HasDefaultValueSql("('127.0.0.1')")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsApproved");

                    b.Property<bool?>("IsClosed")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("ModifyDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PagePath")
                        .HasMaxLength(500);

                    b.Property<string>("Remark")
                        .HasColumnType("ntext");

                    b.Property<string>("SectionDescription")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int?>("UserId");

                    b.HasKey("ReportId")
                        .HasName("PK__ReportBu__D5BD480506ED0088");

                    b.HasIndex("UserId");

                    b.ToTable("ReportBug");
                });

            modelBuilder.Entity("EMS.Data.Model.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("MenuAccess")
                        .HasMaxLength(500);

                    b.Property<string>("RoleName")
                        .HasMaxLength(50);

                    b.HasKey("RoleId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("EMS.Data.Model.SaturdayManagement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("Ispresent");

                    b.Property<DateTime?>("LastProcessDt")
                        .HasColumnType("datetime");

                    b.Property<int?>("Month");

                    b.Property<DateTime?>("SaturdayDt")
                        .HasColumnType("datetime");

                    b.Property<int?>("Uid")
                        .HasColumnName("UID");

                    b.Property<DateTime?>("UpdatedDt")
                        .HasColumnType("datetime");

                    b.Property<int?>("Year");

                    b.HasKey("Id");

                    b.HasIndex("Uid", "SaturdayDt")
                        .IsUnique()
                        .HasName("unq_PresentDt")
                        .HasFilter("[UID] IS NOT NULL AND [SaturdayDt] IS NOT NULL");

                    b.ToTable("SaturdayManagement");
                });

            modelBuilder.Entity("EMS.Data.Model.SubProjects", b =>
                {
                    b.Property<int>("SubProjectId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ProjectId");

                    b.Property<string>("SubProjectName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(200);

                    b.HasKey("SubProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("SubProjects");
                });

            modelBuilder.Entity("EMS.Data.Model.Task", b =>
                {
                    b.Property<decimal>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TaskID")
                        .HasColumnType("numeric(18, 0)")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedUid");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("LastUpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short?>("Priority");

                    b.Property<string>("Remark");

                    b.Property<DateTime?>("TaskEndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TaskName")
                        .HasMaxLength(500);

                    b.Property<int>("TaskStatusId")
                        .HasColumnName("TaskStatusID");

                    b.HasKey("TaskId");

                    b.HasIndex("AddedUid");

                    b.HasIndex("TaskStatusId");

                    b.ToTable("Task");
                });

            modelBuilder.Entity("EMS.Data.Model.TaskAssignedTo", b =>
                {
                    b.Property<decimal>("AssignedToTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AssignedToTaskID")
                        .HasColumnType("numeric(18, 0)")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssignUid");

                    b.Property<decimal>("TaskId")
                        .HasColumnName("TaskID")
                        .HasColumnType("numeric(18, 0)");

                    b.HasKey("AssignedToTaskId")
                        .HasName("PK__TaskAssi__8B514B062B155265");

                    b.HasIndex("AssignUid");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskAssignedTo");
                });

            modelBuilder.Entity("EMS.Data.Model.TaskComment", b =>
                {
                    b.Property<decimal>("TaskCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TaskCommentID")
                        .HasColumnType("numeric(18, 0)")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("AddedUid");

                    b.Property<string>("Comment");

                    b.Property<decimal>("TaskId")
                        .HasColumnName("TaskID")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<int>("TaskStatusId")
                        .HasColumnName("TaskStatusID");

                    b.HasKey("TaskCommentId");

                    b.HasIndex("AddedUid");

                    b.HasIndex("TaskId");

                    b.HasIndex("TaskStatusId");

                    b.ToTable("TaskComment");
                });

            modelBuilder.Entity("EMS.Data.Model.TaskStatus", b =>
                {
                    b.Property<int>("TaskStatusId")
                        .HasColumnName("TaskStatusID");

                    b.Property<string>("TaskStatus1")
                        .HasColumnName("TaskStatus")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("TaskStatusId");

                    b.ToTable("TaskStatus");
                });

            modelBuilder.Entity("EMS.Data.Model.Technology", b =>
                {
                    b.Property<int>("TechId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("ModifyDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Title")
                        .HasMaxLength(50);

                    b.HasKey("TechId");

                    b.ToTable("Technology");
                });

            modelBuilder.Entity("EMS.Data.Model.TypeMaster", b =>
                {
                    b.Property<int>("TypeId");

                    b.Property<string>("TypeGroup")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("TypeId")
                        .HasName("PK__TypeMast__516F03B52A363CC5");

                    b.ToTable("TypeMaster");
                });

            modelBuilder.Entity("EMS.Data.Model.UserActivity", b =>
                {
                    b.Property<int>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ActivityID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasMaxLength(2000);

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime");

                    b.Property<int?>("ProjectId");

                    b.Property<string>("ProjectName")
                        .HasMaxLength(500);

                    b.Property<string>("Status")
                        .HasMaxLength(50);

                    b.Property<int>("SubProjectId");

                    b.Property<int?>("Uid");

                    b.HasKey("ActivityId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("Uid");

                    b.ToTable("UserActivity");
                });

            modelBuilder.Entity("EMS.Data.Model.UserActivityLog", b =>
                {
                    b.Property<int>("ActivityLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ActivityLogID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<int?>("ProjectId");

                    b.Property<string>("ProjectName")
                        .HasMaxLength(500);

                    b.Property<string>("Status")
                        .HasMaxLength(50);

                    b.Property<int?>("Uid");

                    b.HasKey("ActivityLogId")
                        .HasName("PK__UserActi__19A9B78F41AE9EFA");

                    b.HasIndex("ProjectId");

                    b.HasIndex("Uid");

                    b.ToTable("UserActivityLog");
                });

            modelBuilder.Entity("EMS.Data.Model.UserLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Ip")
                        .HasColumnName("IP")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Login")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Logout")
                        .HasColumnType("datetime");

                    b.Property<int?>("Uid");

                    b.HasKey("LogId");

                    b.HasIndex("Uid");

                    b.ToTable("UserLog");
                });

            modelBuilder.Entity("EMS.Data.Model.UserLogin", b =>
                {
                    b.Property<int>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AadharNumber")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("AddDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Address")
                        .HasColumnType("ntext");

                    b.Property<string>("AlternativeNumber")
                        .HasMaxLength(50);

                    b.Property<string>("ApiPassword")
                        .HasMaxLength(50);

                    b.Property<int?>("BloodGroupId");

                    b.Property<int?>("CrmuserId")
                        .HasColumnName("CRMUserId");

                    b.Property<int?>("DeptId");

                    b.Property<DateTime?>("Dob")
                        .HasColumnName("DOB")
                        .HasColumnType("datetime");

                    b.Property<string>("EmailOffice")
                        .HasMaxLength(200);

                    b.Property<string>("EmailPersonal")
                        .HasMaxLength(200);

                    b.Property<string>("EmpCode")
                        .HasMaxLength(50);

                    b.Property<string>("Gender")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<int?>("Hrmid")
                        .HasColumnName("HRMId");

                    b.Property<string>("Ip")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IP")
                        .HasDefaultValueSql("('0.0.0.0')")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsSuperAdmin");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("JoinedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("MarraigeDate")
                        .HasColumnType("date");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<string>("PanNumber")
                        .HasMaxLength(20);

                    b.Property<string>("PassportNumber")
                        .HasMaxLength(20);

                    b.Property<string>("Password")
                        .HasMaxLength(200);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50);

                    b.Property<int?>("Pmuid")
                        .HasColumnName("PMUid");

                    b.Property<int?>("RoleId");

                    b.Property<string>("SkypeId")
                        .HasMaxLength(200);

                    b.Property<string>("Title")
                        .HasMaxLength(20);

                    b.Property<int?>("Tlid")
                        .HasColumnName("TLId");

                    b.Property<string>("UserName")
                        .HasMaxLength(200);

                    b.HasKey("Uid");

                    b.HasIndex("BloodGroupId");

                    b.HasIndex("DeptId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasName("uc_UserLogin")
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("UserLogin");
                });

            modelBuilder.Entity("EMS.Data.Model.UserSpec", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TechId");

                    b.Property<int>("Uid");

                    b.HasKey("Id");

                    b.HasIndex("TechId");

                    b.HasIndex("Uid");

                    b.ToTable("User_Spec");
                });

            modelBuilder.Entity("EMS.Data.Model.UserTech", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TechId");

                    b.Property<int>("Uid");

                    b.HasKey("Id");

                    b.HasIndex("TechId");

                    b.HasIndex("Uid");

                    b.ToTable("User_Tech");
                });

            modelBuilder.Entity("EMS.Data.Model.UserTimeSheet", b =>
                {
                    b.Property<decimal>("UserTimeSheetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserTimeSheetID")
                        .HasColumnType("numeric(18, 0)")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("InsertedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsReviewed");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ProjectId")
                        .HasColumnName("ProjectID");

                    b.Property<int?>("ReviewedByUid");

                    b.Property<DateTime?>("ReviewedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Uid")
                        .HasColumnName("UID");

                    b.Property<int?>("VirtualDeveloperId")
                        .HasColumnName("VirtualDeveloper_id");

                    b.Property<TimeSpan>("WorkHours");

                    b.HasKey("UserTimeSheetId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ReviewedByUid");

                    b.HasIndex("Uid");

                    b.HasIndex("VirtualDeveloperId");

                    b.ToTable("UserTimeSheet");
                });

            modelBuilder.Entity("EMS.Data.Model.VirtualDeveloper", b =>
                {
                    b.Property<int>("VirtualDeveloperId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VirtualDeveloper_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Emailid")
                        .HasColumnName("emailid")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("Isactive")
                        .HasColumnName("isactive");

                    b.Property<bool?>("Ismain");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Pmuid")
                        .HasColumnName("PMUid");

                    b.Property<string>("SkypeId")
                        .HasColumnName("Skype_id")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("VirtualDeveloperName")
                        .HasColumnName("VirtualDeveloper_Name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("VirtualDeveloperId");

                    b.ToTable("VirtualDeveloper");
                });

            modelBuilder.Entity("EMS.Data.Model.AlertMessage", b =>
                {
                    b.HasOne("EMS.Data.Model.UserLogin", "U")
                        .WithMany("AlertMessage")
                        .HasForeignKey("Uid")
                        .HasConstraintName("FK_AlertMessage_UserLogin");
                });

            modelBuilder.Entity("EMS.Data.Model.AlertMessageRead", b =>
                {
                    b.HasOne("EMS.Data.Model.AlertMessage", "Alert")
                        .WithMany("AlertMessageRead")
                        .HasForeignKey("AlertId")
                        .HasConstraintName("FK_AlertMessageRead_AlertMessage");

                    b.HasOne("EMS.Data.Model.UserLogin", "U")
                        .WithMany("AlertMessageRead")
                        .HasForeignKey("Uid")
                        .HasConstraintName("FK_AlertMessageRead_UserLogin");
                });

            modelBuilder.Entity("EMS.Data.Model.Appraisal", b =>
                {
                    b.HasOne("EMS.Data.Model.UserLogin", "U")
                        .WithMany("Appraisal")
                        .HasForeignKey("Uid")
                        .HasConstraintName("FK_Appraisal_UserLogin");
                });

            modelBuilder.Entity("EMS.Data.Model.AppraisalExtras", b =>
                {
                    b.HasOne("EMS.Data.Model.Appraisal", "Appraisal")
                        .WithMany("AppraisalExtras")
                        .HasForeignKey("AppraisalId")
                        .HasConstraintName("FK_AppraisalExtras_Appraisal");
                });

            modelBuilder.Entity("EMS.Data.Model.AvailUser", b =>
                {
                    b.HasOne("EMS.Data.Model.UserLogin", "U")
                        .WithMany("AvailUserU")
                        .HasForeignKey("Uid")
                        .HasConstraintName("FK__AvailUser__UID__4B2D1C3C");

                    b.HasOne("EMS.Data.Model.UserLogin", "User")
                        .WithMany("AvailUserUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__AvailUser__UserI__4C214075");
                });

            modelBuilder.Entity("EMS.Data.Model.CadidateExam", b =>
                {
                    b.HasOne("EMS.Data.Model.Candidate", "Candidate")
                        .WithMany("CadidateExam")
                        .HasForeignKey("CandidateId")
                        .HasConstraintName("FK__CadidateE__Candi__3631FF56");

                    b.HasOne("EMS.Data.Model.Examination", "Exam")
                        .WithMany("CadidateExam")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("FK__CadidateE__ExamI__3726238F");
                });

            modelBuilder.Entity("EMS.Data.Model.CandidateAnswer", b =>
                {
                    b.HasOne("EMS.Data.Model.ExamQuestion", "Cquestion")
                        .WithMany("CandidateAnswer")
                        .HasForeignKey("CquestionId")
                        .HasConstraintName("FK__Candidate__CQues__3DD3211E");
                });

            modelBuilder.Entity("EMS.Data.Model.CompanyDocument", b =>
                {
                    b.HasOne("EMS.Data.Model.Department", "Department")
                        .WithMany("CompanyDocument")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK__CompanyDo__Depar__530E3526");
                });

            modelBuilder.Entity("EMS.Data.Model.Component", b =>
                {
                    b.HasOne("EMS.Data.Model.ComponentCategory", "ComponentCategory")
                        .WithMany("Component")
                        .HasForeignKey("ComponentCategoryId")
                        .HasConstraintName("FK__Component__Compo__5B6E70FD");

                    b.HasOne("EMS.Data.Model.UserLogin", "CreatedByU")
                        .WithMany("Component")
                        .HasForeignKey("CreatedByUid")
                        .HasConstraintName("FK__Component__Creat__5C629536");
                });

            modelBuilder.Entity("EMS.Data.Model.CurrentOpening", b =>
                {
                    b.HasOne("EMS.Data.Model.Department", "Department")
                        .WithMany("CurrentOpening")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK__CurrentOp__Depar__18AC8967");
                });

            modelBuilder.Entity("EMS.Data.Model.DesignerManagement", b =>
                {
                    b.HasOne("EMS.Data.Model.UserLogin", "AddedU")
                        .WithMany("DesignerManagementAddedU")
                        .HasForeignKey("AddedUid")
                        .HasConstraintName("FK_DesignerManagement_UserLogin1");

                    b.HasOne("EMS.Data.Model.UserLogin", "AssignU")
                        .WithMany("DesignerManagementAssignU")
                        .HasForeignKey("AssignUid")
                        .HasConstraintName("FK_DesignerManagement_UserLogin");

                    b.HasOne("EMS.Data.Model.Project", "Project")
                        .WithMany("DesignerManagement")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_DesignerManagement_Project");
                });

            modelBuilder.Entity("EMS.Data.Model.DeviceDeviceHistory", b =>
                {
                    b.HasOne("EMS.Data.Model.DeviceDeviceInfo", "DeviceDeviceInfo")
                        .WithMany("DeviceDeviceHistory")
                        .HasForeignKey("DeviceDeviceInfoId")
                        .HasConstraintName("FK__DeviceDev__Devic__04BA9F53");

                    b.HasOne("EMS.Data.Model.UserLogin", "U")
                        .WithMany("DeviceDeviceHistory")
                        .HasForeignKey("Uid")
                        .HasConstraintName("FK__DeviceDevic__Uid__05AEC38C");
                });

            modelBuilder.Entity("EMS.Data.Model.DeviceDeviceInfo", b =>
                {
                    b.HasOne("EMS.Data.Model.DeviceCategory", "DeviceCategory")
                        .WithMany("DeviceDeviceInfo")
                        .HasForeignKey("DeviceCategoryId")
                        .HasConstraintName("FK__DeviceDev__Devic__7FF5EA36");

                    b.HasOne("EMS.Data.Model.UserLogin", "Pm")
                        .WithMany("DeviceDeviceInfo")
                        .HasForeignKey("PmId")
                        .HasConstraintName("FK__DeviceDevi__PmId__097F5470");
                });

            modelBuilder.Entity("EMS.Data.Model.ElanceAssignedJob", b =>
                {
                    b.HasOne("EMS.Data.Model.ElanceJobDetails", "ElanceJob")
                        .WithMany("ElanceAssignedJob")
                        .HasForeignKey("ElanceJobId")
                        .HasConstraintName("FK_ElanceAssignedJob_ElanceAssignedJob");

                    b.HasOne("EMS.Data.Model.UserLogin", "User")
                        .WithMany("ElanceAssignedJob")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_ElanceAssignedJob_UserLogin");
                });

            modelBuilder.Entity("EMS.Data.Model.EmpLateActivity", b =>
                {
                    b.HasOne("EMS.Data.Model.UserLogin", "U")
                        .WithMany("EmpLateActivity")
                        .HasForeignKey("Uid")
                        .HasConstraintName("FK__EmpLateActi__Uid__23893F36");
                });

            modelBuilder.Entity("EMS.Data.Model.EmployeeAnswers", b =>
                {
                    b.HasOne("EMS.Data.Model.Appraisal", "Appraisal")
                        .WithMany("EmployeeAnswers")
                        .HasForeignKey("AppraisalId")
                        .HasConstraintName("FK_EmployeeAnswers_Appraisal");

                    b.HasOne("EMS.Data.Model.Questions", "Q")
                        .WithMany("EmployeeAnswers")
                        .HasForeignKey("Qid")
                        .HasConstraintName("FK_EmployeeAnswers_Questions");
                });

            modelBuilder.Entity("EMS.Data.Model.EmployeeAppraise", b =>
                {
                    b.HasOne("EMS.Data.Model.UserLogin", "Employee")
                        .WithMany("EmployeeAppraiseEmployee")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_EmployeeAppraise_UserLogin2");

                    b.HasOne("EMS.Data.Model.UserLogin", "User")
                        .WithMany("EmployeeAppraiseUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_EmployeeAppraise_UserLogin");
                });

            modelBuilder.Entity("EMS.Data.Model.EmployeeComplaint", b =>
                {
                    b.HasOne("EMS.Data.Model.UserLogin", "Employee")
                        .WithMany("EmployeeComplaintEmployee")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_EmployeeComplaint_UserLogin1");

                    b.HasOne("EMS.Data.Model.UserLogin", "User")
                        .WithMany("EmployeeComplaintUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_EmployeeComplaint_UserLogin");
                });

            modelBuilder.Entity("EMS.Data.Model.EmployeeFeedback", b =>
                {
                    b.HasOne("EMS.Data.Model.UserLogin", "U")
                        .WithMany("EmployeeFeedback")
                        .HasForeignKey("Uid")
                        .HasConstraintName("FK__EmployeeFee__Uid__64F7DB37");
                });

            modelBuilder.Entity("EMS.Data.Model.EmployeeFeedbackRankStatus", b =>
                {
                    b.HasOne("EMS.Data.Model.EmployeeFeedback", "EmployeeFeedback")
                        .WithMany("EmployeeFeedbackRankStatus")
                        .HasForeignKey("EmployeeFeedbackId")
                        .HasConstraintName("FK__EmployeeF__Emplo__76226739");

                    b.HasOne("EMS.Data.Model.EmployeeFeedbackReason", "EmployeeFeedbackRank")
                        .WithMany("EmployeeFeedbackRankStatus")
                        .HasForeignKey("EmployeeFeedbackRankId")
                        .HasConstraintName("FK__EmployeeF__Emplo__752E4300");
                });

            modelBuilder.Entity("EMS.Data.Model.EmployeeFeedbackReasonMapping", b =>
                {
                    b.HasOne("EMS.Data.Model.EmployeeFeedback", "EmployeeFeedback")
                        .WithMany("EmployeeFeedbackReasonMapping")
                        .HasForeignKey("EmployeeFeedbackId")
                        .HasConstraintName("FK__EmployeeF__Emplo__6F7569AA");

                    b.HasOne("EMS.Data.Model.EmployeeFeedbackReason", "EmployeeFeedbackReason")
                        .WithMany("EmployeeFeedbackReasonMapping")
                        .HasForeignKey("EmployeeFeedbackReasonId")
                        .HasConstraintName("FK__EmployeeF__Emplo__70698DE3");
                });

            modelBuilder.Entity("EMS.Data.Model.EmployeeMedicalData", b =>
                {
                    b.HasOne("EMS.Data.Model.UserLogin", "User")
                        .WithMany("EmployeeMedicalData")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_Employeemedicaluser");
                });

            modelBuilder.Entity("EMS.Data.Model.EmployeeProject", b =>
                {
                    b.HasOne("EMS.Data.Model.Project", "Project")
                        .WithMany("EmployeeProject")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_EmployeeProject_Project");

                    b.HasOne("EMS.Data.Model.Role", "RoleNavigation")
                        .WithMany("EmployeeProject")
                        .HasForeignKey("Role")
                        .HasConstraintName("FK_EmployeeProject_Role");
                });

            modelBuilder.Entity("EMS.Data.Model.EmployeeRelativeMedicalData", b =>
                {
                    b.HasOne("EMS.Data.Model.EmployeeMedicalData", "EmployeeMedical")
                        .WithMany("EmployeeRelativeMedicalData")
                        .HasForeignKey("EmployeeMedicalId")
                        .HasConstraintName("fk_employeereative");
                });

            modelBuilder.Entity("EMS.Data.Model.EstimateDocument", b =>
                {
                    b.HasOne("EMS.Data.Model.ProjectLead", "Lead")
                        .WithMany("EstimateDocument")
                        .HasForeignKey("LeadId")
                        .HasConstraintName("fk_lead");

                    b.HasOne("EMS.Data.Model.UserLogin", "UidUploadedByNavigation")
                        .WithMany("EstimateDocument")
                        .HasForeignKey("UidUploadedBy")
                        .HasConstraintName("FK_UploadedBy");
                });

            modelBuilder.Entity("EMS.Data.Model.ExamQuestion", b =>
                {
                    b.HasOne("EMS.Data.Model.TypeMaster", "QuestionLevelNavigation")
                        .WithMany("ExamQuestionQuestionLevelNavigation")
                        .HasForeignKey("QuestionLevel")
                        .HasConstraintName("FK__ExamQuest__Quest__0E240DFC");

                    b.HasOne("EMS.Data.Model.TypeMaster", "QuestionTypeNavigation")
                        .WithMany("ExamQuestionQuestionTypeNavigation")
                        .HasForeignKey("QuestionType")
                        .HasConstraintName("FK__ExamQuest__Quest__0D2FE9C3");

                    b.HasOne("EMS.Data.Model.Technology", "Technology")
                        .WithMany("ExamQuestion")
                        .HasForeignKey("TechnologyId")
                        .HasConstraintName("FK__ExamQuest__Techn__0C3BC58A");
                });

            modelBuilder.Entity("EMS.Data.Model.ExamQuestionAnswerDetail", b =>
                {
                    b.HasOne("EMS.Data.Model.ExamQuestion", "Quest")
                        .WithMany("ExamQuestionAnswerDetail")
                        .HasForeignKey("QuestId")
                        .HasConstraintName("FK__ExamQuest__Quest__16B953FD");
                });

            modelBuilder.Entity("EMS.Data.Model.ExamQuestionDetail", b =>
                {
                    b.HasOne("EMS.Data.Model.Examination", "Exam")
                        .WithMany("ExamQuestionDetail")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("FK__ExamQuest__ExamI__27E3DFFF");

                    b.HasOne("EMS.Data.Model.ExamQuestion", "Question")
                        .WithMany("ExamQuestionDetail")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("FK__ExamQuest__Quest__28D80438");
                });

            modelBuilder.Entity("EMS.Data.Model.Forecasting", b =>
                {
                    b.HasOne("EMS.Data.Model.UserLogin", "AddedPersonU")
                        .WithMany("Forecasting")
                        .HasForeignKey("AddedPersonUid")
                        .HasConstraintName("FK_Forecasting_UserLogin");

                    b.HasOne("EMS.Data.Model.Client", "Client")
                        .WithMany("Forecasting")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_Forecasting_Client");

                    b.HasOne("EMS.Data.Model.ProjectLead", "Lead")
                        .WithMany("Forecasting")
                        .HasForeignKey("LeadId")
                        .HasConstraintName("FK_Forecasting_ProjectLead");

                    b.HasOne("EMS.Data.Model.Project", "Project")
                        .WithMany("Forecasting")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_Forecasting_Project");
                });

            modelBuilder.Entity("EMS.Data.Model.ForumFeedback", b =>
                {
                    b.HasOne("EMS.Data.Model.Forums", "Forum")
                        .WithMany("ForumFeedback")
                        .HasForeignKey("ForumId")
                        .HasConstraintName("FK_ForumFeedback_ForumFeedback");

                    b.HasOne("EMS.Data.Model.UserLogin", "User")
                        .WithMany("ForumFeedback")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_ForumFeedback_UserLogin");
                });

            modelBuilder.Entity("EMS.Data.Model.Forums", b =>
                {
                    b.HasOne("EMS.Data.Model.UserLogin", "User")
                        .WithMany("Forums")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Forums_UserLogin");
                });

            modelBuilder.Entity("EMS.Data.Model.FullLeave", b =>
                {
                    b.HasOne("EMS.Data.Model.Appraisal", "Appraisal")
                        .WithMany("FullLeave")
                        .HasForeignKey("AppraisalId")
                        .HasConstraintName("FK_FullLeave_Appraisal");

                    b.HasOne("EMS.Data.Model.UserLogin", "User")
                        .WithMany("FullLeave")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_FullLeave_UserLogin");
                });

            modelBuilder.Entity("EMS.Data.Model.HalfLeave", b =>
                {
                    b.HasOne("EMS.Data.Model.Appraisal", "Appraisal")
                        .WithMany("HalfLeave")
                        .HasForeignKey("AppraisalId")
                        .HasConstraintName("FK_HalfLeave_Appraisal");

                    b.HasOne("EMS.Data.Model.UserLogin", "User")
                        .WithMany("HalfLeave")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_HalfLeave_UserLogin");
                });

            modelBuilder.Entity("EMS.Data.Model.IntwQues", b =>
                {
                    b.HasOne("EMS.Data.Model.IntwQuestype", "IntwQuestype")
                        .WithMany("IntwQues")
                        .HasForeignKey("IntwQuestypeId")
                        .HasConstraintName("FK_IntwQues_IntwQuestypeId");

                    b.HasOne("EMS.Data.Model.IntwTechnology", "IntwTechnology")
                        .WithMany("IntwQues")
                        .HasForeignKey("IntwTechnologyId")
                        .HasConstraintName("FK_IntwQues_IntwTechnologyId");
                });

            modelBuilder.Entity("EMS.Data.Model.IntwQuesExp", b =>
                {
                    b.HasOne("EMS.Data.Model.IntwExperience", "IntwExperience")
                        .WithMany("IntwQuesExp")
                        .HasForeignKey("IntwExperienceId")
                        .HasConstraintName("FK_IntwQuesExp_ExperienceID");

                    b.HasOne("EMS.Data.Model.IntwQues", "IntwQues")
                        .WithMany("IntwQuesExp")
                        .HasForeignKey("IntwQuesId")
                        .HasConstraintName("FK_IntwQuesExp_IntwQuesId");
                });

            modelBuilder.Entity("EMS.Data.Model.IntwQusOptions", b =>
                {
                    b.HasOne("EMS.Data.Model.IntwQues", "IntwQues")
                        .WithMany("IntwQusOptions")
                        .HasForeignKey("IntwQuesId")
                        .HasConstraintName("FK_IntwQusOptions_IntwQuesId");
                });

            modelBuilder.Entity("EMS.Data.Model.IntwUser", b =>
                {
                    b.HasOne("EMS.Data.Model.IntwTechnology", "IntwTechnology")
                        .WithMany("IntwUser")
                        .HasForeignKey("IntwTechnologyId")
                        .HasConstraintName("FK_IntwUser_IntwTechnologyId");
                });

            modelBuilder.Entity("EMS.Data.Model.IntwUserAnswer", b =>
                {
                    b.HasOne("EMS.Data.Model.IntwQusOptions", "IntwQusOptions")
                        .WithMany("IntwUserAnswer")
                        .HasForeignKey("IntwQusOptionsId")
                        .HasConstraintName("FK_IntwUserAnswer_IntwQusOptions");

                    b.HasOne("EMS.Data.Model.IntwUser", "IntwUser")
                        .WithMany("IntwUserAnswer")
                        .HasForeignKey("IntwUserId")
                        .HasConstraintName("FK_IntwUserAnswer_IntwUser");

                    b.HasOne("EMS.Data.Model.IntwUserQues", "IntwUserQues")
                        .WithMany("IntwUserAnswer")
                        .HasForeignKey("IntwUserQuesId")
                        .HasConstraintName("FK_IntwUserAnswer_IntwUserQues");

                    b.HasOne("EMS.Data.Model.IntwUserSession", "IntwUserSession")
                        .WithMany("IntwUserAnswer")
                        .HasForeignKey("IntwUserSessionId")
                        .HasConstraintName("FK_IntwUserAnswer_IntwUserSession");
                });

            modelBuilder.Entity("EMS.Data.Model.IntwUserQues", b =>
                {
                    b.HasOne("EMS.Data.Model.IntwQues", "IntwQues")
                        .WithMany("IntwUserQues")
                        .HasForeignKey("IntwQuesid")
                        .HasConstraintName("FK_IntwUserQues_IntwQues");

                    b.HasOne("EMS.Data.Model.IntwUserSession", "IntwUserSession")
                        .WithMany("IntwUserQues")
                        .HasForeignKey("IntwUserSessionid")
                        .HasConstraintName("FK_IntwUserQues_IntwUserSession");

                    b.HasOne("EMS.Data.Model.IntwUser", "IntwUser")
                        .WithMany("IntwUserQues")
                        .HasForeignKey("IntwUserid")
                        .HasConstraintName("FK_IntwUserQues_IntwUser");
                });

            modelBuilder.Entity("EMS.Data.Model.IntwUserSession", b =>
                {
                    b.HasOne("EMS.Data.Model.IntwQuesExp", "IntwQuesExp")
                        .WithMany("IntwUserSession")
                        .HasForeignKey("IntwQuesExpId")
                        .HasConstraintName("FK_IntwUserSession_IntwQuesExpId");

                    b.HasOne("EMS.Data.Model.IntwUser", "IntwUser")
                        .WithMany("IntwUserSession")
                        .HasForeignKey("IntwUserId")
                        .HasConstraintName("FK_IntwUserSession_IntwUserId");
                });

            modelBuilder.Entity("EMS.Data.Model.JobReference", b =>
                {
                    b.HasOne("EMS.Data.Model.CurrentOpening", "CurrentOpening")
                        .WithMany("JobReference")
                        .HasForeignKey("CurrentOpeningId")
                        .HasConstraintName("FK__JobRefere__Curre__28E2F130");

                    b.HasOne("EMS.Data.Model.UserLogin", "ReferByUserLogin")
                        .WithMany("JobReference")
                        .HasForeignKey("ReferByUserLoginId")
                        .HasConstraintName("FK__JobRefere__Refer__29D71569");
                });

            modelBuilder.Entity("EMS.Data.Model.KnowledgeBase", b =>
                {
                    b.HasOne("EMS.Data.Model.UserLogin", "User")
                        .WithMany("KnowledgeBase")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CodeLibrary_UserLogin");
                });

            modelBuilder.Entity("EMS.Data.Model.KnowledgeDepartment", b =>
                {
                    b.HasOne("EMS.Data.Model.KnowledgeBase", "Code")
                        .WithMany("KnowledgeDepartment")
                        .HasForeignKey("CodeId")
                        .HasConstraintName("FK__Knowledge__CodeI__232A17DA");

                    b.HasOne("EMS.Data.Model.Department", "Dept")
                        .WithMany("KnowledgeDepartment")
                        .HasForeignKey("DeptId")
                        .HasConstraintName("FK__Knowledge__DeptI__241E3C13");
                });

            modelBuilder.Entity("EMS.Data.Model.KnowledgeTech", b =>
                {
                    b.HasOne("EMS.Data.Model.KnowledgeBase", "Code")
                        .WithMany("KnowledgeTech")
                        .HasForeignKey("CodeId")
                        .HasConstraintName("FK_CodeTech_CodeLibrary");

                    b.HasOne("EMS.Data.Model.Technology", "Tech")
                        .WithMany("KnowledgeTech")
                        .HasForeignKey("TechId")
                        .HasConstraintName("FK_CodeTech_Technology");
                });

            modelBuilder.Entity("EMS.Data.Model.LateHour", b =>
                {
                    b.HasOne("EMS.Data.Model.UserLogin", "ModifiedByU")
                        .WithMany("LateHourModifiedByU")
                        .HasForeignKey("ModifiedByUid")
                        .HasConstraintName("FK__LateHour__Modifi__0EEE1503");

                    b.HasOne("EMS.Data.Model.UserLogin", "U")
                        .WithMany("LateHourU")
                        .HasForeignKey("Uid")
                        .HasConstraintName("FK__LateHour__Uid__0DF9F0CA");
                });

            modelBuilder.Entity("EMS.Data.Model.LeadTechnician", b =>
                {
                    b.HasOne("EMS.Data.Model.ProjectLead", "Lead")
                        .WithMany("LeadTechnician")
                        .HasForeignKey("LeadId")
                        .HasConstraintName("FK__LeadTechn__LeadI__795DFB40");

                    b.HasOne("EMS.Data.Model.UserLogin", "Technician")
                        .WithMany("LeadTechnician")
                        .HasForeignKey("TechnicianId")
                        .HasConstraintName("FK__LeadTechn__Techn__7A521F79");
                });

            modelBuilder.Entity("EMS.Data.Model.LeadTechnicianArchive", b =>
                {
                    b.HasOne("EMS.Data.Model.ProjectLeadArchive", "Lead")
                        .WithMany("LeadTechnicianArchive")
                        .HasForeignKey("LeadId")
                        .HasConstraintName("FK__LeadTechn__LeadI__60D24498");

                    b.HasOne("EMS.Data.Model.UserLogin", "Technician")
                        .WithMany("LeadTechnicianArchive")
                        .HasForeignKey("TechnicianId")
                        .HasConstraintName("FK__LeadTechn__Techn__61C668D1");
                });

            modelBuilder.Entity("EMS.Data.Model.LeadTransaction", b =>
                {
                    b.HasOne("EMS.Data.Model.UserLogin", "AddedByNavigation")
                        .WithMany("LeadTransaction")
                        .HasForeignKey("AddedBy")
                        .HasConstraintName("FK__LeadTrans__Added__10416098");

                    b.HasOne("EMS.Data.Model.ProjectLead", "Lead")
                        .WithMany("LeadTransaction")
                        .HasForeignKey("LeadId")
                        .HasConstraintName("FK__LeadTrans__LeadI__0E591826");

                    b.HasOne("EMS.Data.Model.LeadStatus", "Status")
                        .WithMany("LeadTransaction")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK__LeadTrans__Statu__0F4D3C5F");
                });

            modelBuilder.Entity("EMS.Data.Model.LeadTransactionArchive", b =>
                {
                    b.HasOne("EMS.Data.Model.UserLogin", "AddedByNavigation")
                        .WithMany("LeadTransactionArchive")
                        .HasForeignKey("AddedBy")
                        .HasConstraintName("FK__LeadTrans__Added__5B196B42");

                    b.HasOne("EMS.Data.Model.ProjectLeadArchive", "Lead")
                        .WithMany("LeadTransactionArchive")
                        .HasForeignKey("LeadId")
                        .HasConstraintName("FK__LeadTrans__LeadI__593122D0");

                    b.HasOne("EMS.Data.Model.LeadStatus", "Status")
                        .WithMany("LeadTransactionArchive")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK__LeadTrans__Statu__5A254709");
                });

            modelBuilder.Entity("EMS.Data.Model.LeaveActivity", b =>
                {
                    b.HasOne("EMS.Data.Model.LeaveAdjust", "Adjust")
                        .WithMany("LeaveActivity")
                        .HasForeignKey("AdjustId")
                        .HasConstraintName("FK_LeaveActivity_LeaveAdjust");

                    b.HasOne("EMS.Data.Model.TypeMaster", "LeaveTypeNavigation")
                        .WithMany("LeaveActivityLeaveTypeNavigation")
                        .HasForeignKey("LeaveType")
                        .HasConstraintName("FK__LeaveActi__Leave__48BAC3E5");

                    b.HasOne("EMS.Data.Model.TypeMaster", "StatusNavigation")
                        .WithMany("LeaveActivityStatusNavigation")
                        .HasForeignKey("Status")
                        .HasConstraintName("FK_LeaveActivity_TypeMaster");

                    b.HasOne("EMS.Data.Model.UserLogin", "U")
                        .WithMany("LeaveActivityU")
                        .HasForeignKey("Uid")
                        .HasConstraintName("FK_LeaveActivity_UserLogin");

                    b.HasOne("EMS.Data.Model.UserLogin", "WorkAlter")
                        .WithMany("LeaveActivityWorkAlter")
                        .HasForeignKey("WorkAlterId")
                        .HasConstraintName("FK__LeaveActi__WorkA__68687968");
                });

            modelBuilder.Entity("EMS.Data.Model.LeaveActivityAdjust", b =>
                {
                    b.HasOne("EMS.Data.Model.LeaveAdjust", "Adjust")
                        .WithMany("LeaveActivityAdjust")
                        .HasForeignKey("Adjustid")
                        .HasConstraintName("FK_LeaveActivityAdjust_LeaveAdjust");

                    b.HasOne("EMS.Data.Model.LeaveActivity", "Leave")
                        .WithMany("LeaveActivityAdjust")
                        .HasForeignKey("LeaveId")
                        .HasConstraintName("FK_LeaveActivityAdjust_LeaveActivity");
                });

            modelBuilder.Entity("EMS.Data.Model.LeaveAdjust", b =>
                {
                    b.HasOne("EMS.Data.Model.UserLogin", "U")
                        .WithMany("LeaveAdjust")
                        .HasForeignKey("Uid")
                        .HasConstraintName("FK_LeaveAdjust_UserLogin");
                });

            modelBuilder.Entity("EMS.Data.Model.MenuAccess", b =>
                {
                    b.HasOne("EMS.Data.Model.FrontMenu", "Menu")
                        .WithMany("MenuAccess")
                        .HasForeignKey("MenuId")
                        .HasConstraintName("FK_MenuAccess_FrontMenu");

                    b.HasOne("EMS.Data.Model.Role", "Role")
                        .WithMany("MenuAccessNavigation")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_MenuAccess_Role");
                });

            modelBuilder.Entity("EMS.Data.Model.PfreviewResult", b =>
                {
                    b.HasOne("EMS.Data.Model.PfreviewQuestion", "PfreviewQuestion")
                        .WithMany("PfreviewResult")
                        .HasForeignKey("PfreviewQuestionId")
                        .HasConstraintName("FK__PFReviewR__PFRev__17ED6F58");

                    b.HasOne("EMS.Data.Model.PfreviewSubmitted", "PfreviewSubmitted")
                        .WithMany("PfreviewResult")
                        .HasForeignKey("PfreviewSubmittedId")
                        .HasConstraintName("FK__PFReviewR__PFRev__16F94B1F");
                });

            modelBuilder.Entity("EMS.Data.Model.PfreviewSubmitted", b =>
                {
                    b.HasOne("EMS.Data.Model.UserLogin", "ReviewByU")
                        .WithMany("PfreviewSubmittedReviewByU")
                        .HasForeignKey("ReviewByUid")
                        .HasConstraintName("FK__PFReviewS__Revie__114071C9");

                    b.HasOne("EMS.Data.Model.UserLogin", "ReviewOnU")
                        .WithMany("PfreviewSubmittedReviewOnU")
                        .HasForeignKey("ReviewOnUid")
                        .HasConstraintName("FK__PFReviewS__Revie__104C4D90");

                    b.HasOne("EMS.Data.Model.PfreviewQuarter", "ReviewQuarterNavigation")
                        .WithMany("PfreviewSubmitted")
                        .HasForeignKey("ReviewQuarter")
                        .HasConstraintName("FK__PFReviewS__Revie__12349602");
                });

            modelBuilder.Entity("EMS.Data.Model.Portfolio", b =>
                {
                    b.HasOne("EMS.Data.Model.UserLogin", "Developer")
                        .WithMany("Portfolio")
                        .HasForeignKey("DeveloperId")
                        .HasConstraintName("FK_Portfolio_User_Project");
                });

            modelBuilder.Entity("EMS.Data.Model.PortfolioDomain", b =>
                {
                    b.HasOne("EMS.Data.Model.DomainType", "Domain")
                        .WithMany("PortfolioDomain")
                        .HasForeignKey("DomainId")
                        .HasConstraintName("FK_Portfolio_Domain_Technology");

                    b.HasOne("EMS.Data.Model.Portfolio", "Portfolio")
                        .WithMany("PortfolioDomain")
                        .HasForeignKey("PortfolioId")
                        .HasConstraintName("FK_Portfolio_Domain_Project");
                });

            modelBuilder.Entity("EMS.Data.Model.PortfolioTech", b =>
                {
                    b.HasOne("EMS.Data.Model.Portfolio", "Portfolio")
                        .WithMany("PortfolioTech")
                        .HasForeignKey("PortfolioId")
                        .HasConstraintName("FK_Portfolio_Tech_Project");

                    b.HasOne("EMS.Data.Model.Technology", "Tech")
                        .WithMany("PortfolioTech")
                        .HasForeignKey("TechId")
                        .HasConstraintName("FK_Portfolio_Tech_Technology");
                });

            modelBuilder.Entity("EMS.Data.Model.Project", b =>
                {
                    b.HasOne("EMS.Data.Model.UserLogin", "AbroadPmu")
                        .WithMany("Project")
                        .HasForeignKey("AbroadPmuid")
                        .HasConstraintName("FK__Project__AbroadP__31AD415B");

                    b.HasOne("EMS.Data.Model.Client", "Client")
                        .WithMany("Project")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_Project_Client");

                    b.HasOne("EMS.Data.Model.BucketModel", "ModelNavigation")
                        .WithMany("Project")
                        .HasForeignKey("Model")
                        .HasConstraintName("FK_Project_BucketModel");
                });

            modelBuilder.Entity("EMS.Data.Model.ProjectClosure", b =>
                {
                    b.HasOne("EMS.Data.Model.UserLogin", "AddedByNavigation")
                        .WithMany("ProjectClosureAddedByNavigation")
                        .HasForeignKey("AddedBy")
                        .HasConstraintName("FK_ProjectClosure_UserLogin3");

                    b.HasOne("EMS.Data.Model.Project", "Project")
                        .WithMany("ProjectClosure")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_ProjectClosure_Project");

                    b.HasOne("EMS.Data.Model.UserLogin", "UidBaNavigation")
                        .WithMany("ProjectClosureUidBaNavigation")
                        .HasForeignKey("UidBa")
                        .HasConstraintName("FK_ProjectClosure_UserLogin");

                    b.HasOne("EMS.Data.Model.UserLogin", "UidDevNavigation")
                        .WithMany("ProjectClosureUidDevNavigation")
                        .HasForeignKey("UidDev")
                        .HasConstraintName("FK_ProjectClosure_UserLogin1");

                    b.HasOne("EMS.Data.Model.UserLogin", "UidTlNavigation")
                        .WithMany("ProjectClosureUidTlNavigation")
                        .HasForeignKey("UidTl")
                        .HasConstraintName("FK_ProjectClosure_UserLogin2");
                });

            modelBuilder.Entity("EMS.Data.Model.ProjectClosureDetail", b =>
                {
                    b.HasOne("EMS.Data.Model.UserLogin", "AddedByU")
                        .WithMany("ProjectClosureDetail")
                        .HasForeignKey("AddedByUid")
                        .HasConstraintName("FK__ProjectCl__Added__382534C0");

                    b.HasOne("EMS.Data.Model.ProjectClosure", "ProjectClosure")
                        .WithMany("ProjectClosureDetail")
                        .HasForeignKey("ProjectClosureId")
                        .HasConstraintName("FK__ProjectCl__Proje__15460CD7");
                });

            modelBuilder.Entity("EMS.Data.Model.ProjectDepartment", b =>
                {
                    b.HasOne("EMS.Data.Model.Department", "Dept")
                        .WithMany("ProjectDepartment")
                        .HasForeignKey("DeptId")
                        .HasConstraintName("FK__Project_D__DeptI__1E6562BD");

                    b.HasOne("EMS.Data.Model.Project", "Project")
                        .WithMany("ProjectDepartment")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK__Project_D__Proje__1D713E84");
                });

            modelBuilder.Entity("EMS.Data.Model.ProjectDeveloper", b =>
                {
                    b.HasOne("EMS.Data.Model.Project", "Project")
                        .WithMany("ProjectDeveloper")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_ProjectDeveloper_Project");

                    b.HasOne("EMS.Data.Model.UserLogin", "U")
                        .WithMany("ProjectDeveloper")
                        .HasForeignKey("Uid")
                        .HasConstraintName("FK_ProjectDeveloper_UserLogin");

                    b.HasOne("EMS.Data.Model.VirtualDeveloper", "Vd")
                        .WithMany("ProjectDeveloper")
                        .HasForeignKey("VdId")
                        .HasConstraintName("FK__ProjectDe__VD_id__5CACADF9");

                    b.HasOne("EMS.Data.Model.TypeMaster", "WorkStatusNavigation")
                        .WithMany("ProjectDeveloper")
                        .HasForeignKey("WorkStatus")
                        .HasConstraintName("FK_ProjectDeveloper_TypeMaster");
                });

            modelBuilder.Entity("EMS.Data.Model.ProjectDeveloperAddon", b =>
                {
                    b.HasOne("EMS.Data.Model.Project", "Project")
                        .WithMany("ProjectDeveloperAddon")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_ProjectDeveloperAddon_Project");

                    b.HasOne("EMS.Data.Model.UserLogin", "U")
                        .WithMany("ProjectDeveloperAddon")
                        .HasForeignKey("Uid")
                        .HasConstraintName("FK_ProjectDeveloperAddon_UserLogin");

                    b.HasOne("EMS.Data.Model.TypeMaster", "WorkRoleNavigation")
                        .WithMany("ProjectDeveloperAddonWorkRoleNavigation")
                        .HasForeignKey("WorkRole")
                        .HasConstraintName("FK_ProjectDeveloperAddon_TypeMaster1");

                    b.HasOne("EMS.Data.Model.TypeMaster", "WorkStatusNavigation")
                        .WithMany("ProjectDeveloperAddonWorkStatusNavigation")
                        .HasForeignKey("WorkStatus")
                        .HasConstraintName("FK_ProjectDeveloperAddon_TypeMaster");
                });

            modelBuilder.Entity("EMS.Data.Model.ProjectInvoice", b =>
                {
                    b.HasOne("EMS.Data.Model.Currency", "Currency")
                        .WithMany("ProjectInvoice")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("FK_ProjectInvoice_Currency");

                    b.HasOne("EMS.Data.Model.Project", "Project")
                        .WithMany("ProjectInvoice")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK__ProjectIn__Proje__3B6BB5BF");

                    b.HasOne("EMS.Data.Model.UserLogin", "UidBaNavigation")
                        .WithMany("ProjectInvoiceUidBaNavigation")
                        .HasForeignKey("UidBa")
                        .HasConstraintName("FK__ProjectIn__Uid_B__3C5FD9F8");

                    b.HasOne("EMS.Data.Model.UserLogin", "UidTlNavigation")
                        .WithMany("ProjectInvoiceUidTlNavigation")
                        .HasForeignKey("UidTl")
                        .HasConstraintName("FK__ProjectIn__Uid_T__3D53FE31");
                });

            modelBuilder.Entity("EMS.Data.Model.ProjectInvoiceComment", b =>
                {
                    b.HasOne("EMS.Data.Model.ProjectInvoice", "ProjectInvoice")
                        .WithMany("ProjectInvoiceComment")
                        .HasForeignKey("ProjectInvoiceId")
                        .HasConstraintName("FK__ProjectIn__Proje__4218B34E");
                });

            modelBuilder.Entity("EMS.Data.Model.ProjectLead", b =>
                {
                    b.HasOne("EMS.Data.Model.AbroadPm", "AbroadPm")
                        .WithMany("ProjectLead")
                        .HasForeignKey("AbroadPmid")
                        .HasConstraintName("FK__ProjectLe__Abroa__60283922");

                    b.HasOne("EMS.Data.Model.UserLogin", "Communicator")
                        .WithMany("ProjectLeadCommunicator")
                        .HasForeignKey("CommunicatorId")
                        .HasConstraintName("FK__ProjectLe__Commu__5F9E293D");

                    b.HasOne("EMS.Data.Model.LeadClient", "LeadClient")
                        .WithMany("ProjectLead")
                        .HasForeignKey("LeadClientId")
                        .HasConstraintName("FK_LeadClientId");

                    b.HasOne("EMS.Data.Model.TypeMaster", "LeadTypeNavigation")
                        .WithMany("ProjectLead")
                        .HasForeignKey("LeadType")
                        .HasConstraintName("FK__ProjectLe__LeadT__6A1BB7B0");

                    b.HasOne("EMS.Data.Model.UserLogin", "Owner")
                        .WithMany("ProjectLeadOwner")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("FK__ProjectLe__Owner__5EAA0504");

                    b.HasOne("EMS.Data.Model.LeadStatus", "StatusNavigation")
                        .WithMany("ProjectLead")
                        .HasForeignKey("Status")
                        .HasConstraintName("FK__ProjectLe__Statu__618671AF");
                });

            modelBuilder.Entity("EMS.Data.Model.ProjectLeadArchive", b =>
                {
                    b.HasOne("EMS.Data.Model.AbroadPm", "AbroadPm")
                        .WithMany("ProjectLeadArchive")
                        .HasForeignKey("AbroadPmid")
                        .HasConstraintName("FK__ProjectLe__Abroa__4159993F");

                    b.HasOne("EMS.Data.Model.UserLogin", "Communicator")
                        .WithMany("ProjectLeadArchiveCommunicator")
                        .HasForeignKey("CommunicatorId")
                        .HasConstraintName("FK__ProjectLe__Commu__40657506");

                    b.HasOne("EMS.Data.Model.LeadClient", "LeadClient")
                        .WithMany("ProjectLeadArchive")
                        .HasForeignKey("LeadClientId")
                        .HasConstraintName("FK__ProjectLe__LeadC__3E7D2C94");

                    b.HasOne("EMS.Data.Model.TypeMaster", "LeadTypeNavigation")
                        .WithMany("ProjectLeadArchive")
                        .HasForeignKey("LeadType")
                        .HasConstraintName("FK__ProjectLe__LeadT__424DBD78");

                    b.HasOne("EMS.Data.Model.UserLogin", "Owner")
                        .WithMany("ProjectLeadArchiveOwner")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("FK__ProjectLe__Owner__3F7150CD");

                    b.HasOne("EMS.Data.Model.LeadStatus", "StatusNavigation")
                        .WithMany("ProjectLeadArchive")
                        .HasForeignKey("Status")
                        .HasConstraintName("FK__ProjectLe__Statu__4341E1B1");
                });

            modelBuilder.Entity("EMS.Data.Model.ProjectLeadTech", b =>
                {
                    b.HasOne("EMS.Data.Model.ProjectLead", "Lead")
                        .WithMany("ProjectLeadTech")
                        .HasForeignKey("LeadId")
                        .HasConstraintName("FK_ProjectLeadTech_LeadId");

                    b.HasOne("EMS.Data.Model.Technology", "Tech")
                        .WithMany("ProjectLeadTech")
                        .HasForeignKey("TechId")
                        .HasConstraintName("FK_ProjectLeadTech_TechId");
                });

            modelBuilder.Entity("EMS.Data.Model.ProjectLeadTechArchive", b =>
                {
                    b.HasOne("EMS.Data.Model.ProjectLeadArchive", "Lead")
                        .WithMany("ProjectLeadTechArchive")
                        .HasForeignKey("LeadId")
                        .HasConstraintName("FK__ProjectLe__LeadI__4DBF7024");

                    b.HasOne("EMS.Data.Model.Technology", "Tech")
                        .WithMany("ProjectLeadTechArchive")
                        .HasForeignKey("TechId")
                        .HasConstraintName("FK__ProjectLe__TechI__4EB3945D");
                });

            modelBuilder.Entity("EMS.Data.Model.ProjectPm", b =>
                {
                    b.HasOne("EMS.Data.Model.Project", "Project")
                        .WithMany("ProjectPm")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fk_projectpm_project");

                    b.HasOne("EMS.Data.Model.UserLogin", "User")
                        .WithMany("ProjectPm")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_projectpm_user");
                });

            modelBuilder.Entity("EMS.Data.Model.ProjectTech", b =>
                {
                    b.HasOne("EMS.Data.Model.Project", "Project")
                        .WithMany("ProjectTech")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_Project_Tech_Project");

                    b.HasOne("EMS.Data.Model.Technology", "Tech")
                        .WithMany("ProjectTech")
                        .HasForeignKey("TechId")
                        .HasConstraintName("FK_Project_Tech_Technology");
                });

            modelBuilder.Entity("EMS.Data.Model.ReadMessage", b =>
                {
                    b.HasOne("EMS.Data.Model.Forums", "Forum")
                        .WithMany("ReadMessage")
                        .HasForeignKey("ForumId")
                        .HasConstraintName("FK_ReadMessage_Forums");

                    b.HasOne("EMS.Data.Model.UserLogin", "U")
                        .WithMany("ReadMessage")
                        .HasForeignKey("Uid")
                        .HasConstraintName("FK_ReadMessage_UserLogin");
                });

            modelBuilder.Entity("EMS.Data.Model.ReportBug", b =>
                {
                    b.HasOne("EMS.Data.Model.UserLogin", "User")
                        .WithMany("ReportBug")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__ReportBug__UserI__0BB1B5A5");
                });

            modelBuilder.Entity("EMS.Data.Model.SaturdayManagement", b =>
                {
                    b.HasOne("EMS.Data.Model.UserLogin", "U")
                        .WithMany("SaturdayManagement")
                        .HasForeignKey("Uid")
                        .HasConstraintName("FK_SaturdayManagement_UserLogin");
                });

            modelBuilder.Entity("EMS.Data.Model.SubProjects", b =>
                {
                    b.HasOne("EMS.Data.Model.Project", "Project")
                        .WithMany("SubProjects")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_SubProjects_SubProjects");
                });

            modelBuilder.Entity("EMS.Data.Model.Task", b =>
                {
                    b.HasOne("EMS.Data.Model.UserLogin", "AddedU")
                        .WithMany("Task")
                        .HasForeignKey("AddedUid")
                        .HasConstraintName("FK__Task__AddedUid__218BE82B");

                    b.HasOne("EMS.Data.Model.TaskStatus", "TaskStatus")
                        .WithMany("Task")
                        .HasForeignKey("TaskStatusId")
                        .HasConstraintName("FK__Task__TaskStatus__2097C3F2");
                });

            modelBuilder.Entity("EMS.Data.Model.TaskAssignedTo", b =>
                {
                    b.HasOne("EMS.Data.Model.UserLogin", "AssignU")
                        .WithMany("TaskAssignedTo")
                        .HasForeignKey("AssignUid")
                        .HasConstraintName("FK__TaskAssig__Assig__2DF1BF10");

                    b.HasOne("EMS.Data.Model.Task", "Task")
                        .WithMany("TaskAssignedTo")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("FK__TaskAssig__TaskI__2CFD9AD7");
                });

            modelBuilder.Entity("EMS.Data.Model.TaskComment", b =>
                {
                    b.HasOne("EMS.Data.Model.UserLogin", "AddedU")
                        .WithMany("TaskComment")
                        .HasForeignKey("AddedUid")
                        .HasConstraintName("FK__TaskComme__Added__3D3402A0");

                    b.HasOne("EMS.Data.Model.Task", "Task")
                        .WithMany("TaskComment")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("FK__TaskComme__TaskI__32B6742D");

                    b.HasOne("EMS.Data.Model.TaskStatus", "TaskStatus")
                        .WithMany("TaskComment")
                        .HasForeignKey("TaskStatusId")
                        .HasConstraintName("FK__TaskComme__TaskS__33AA9866");
                });

            modelBuilder.Entity("EMS.Data.Model.UserActivity", b =>
                {
                    b.HasOne("EMS.Data.Model.Project", "Project")
                        .WithMany("UserActivity")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_UA_Project_ID");

                    b.HasOne("EMS.Data.Model.UserLogin", "U")
                        .WithMany("UserActivity")
                        .HasForeignKey("Uid")
                        .HasConstraintName("FK_UserActivityCheck_UserLogin");
                });

            modelBuilder.Entity("EMS.Data.Model.UserActivityLog", b =>
                {
                    b.HasOne("EMS.Data.Model.Project", "Project")
                        .WithMany("UserActivityLog")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_UAL_Project_ID");

                    b.HasOne("EMS.Data.Model.UserLogin", "U")
                        .WithMany("UserActivityLog")
                        .HasForeignKey("Uid")
                        .HasConstraintName("FK_UserActivityLog_UserLogin");
                });

            modelBuilder.Entity("EMS.Data.Model.UserLog", b =>
                {
                    b.HasOne("EMS.Data.Model.UserLogin", "U")
                        .WithMany("UserLog")
                        .HasForeignKey("Uid")
                        .HasConstraintName("FK_UserLog_UserLog");
                });

            modelBuilder.Entity("EMS.Data.Model.UserLogin", b =>
                {
                    b.HasOne("EMS.Data.Model.BloodGroup", "BloodGroup")
                        .WithMany("UserLogin")
                        .HasForeignKey("BloodGroupId")
                        .HasConstraintName("FK__UserLogin__Blood__521A10ED");

                    b.HasOne("EMS.Data.Model.Department", "Dept")
                        .WithMany("UserLogin")
                        .HasForeignKey("DeptId")
                        .HasConstraintName("FK_UserLogin_Department");

                    b.HasOne("EMS.Data.Model.Role", "Role")
                        .WithMany("UserLogin")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_UserLogin_Role");
                });

            modelBuilder.Entity("EMS.Data.Model.UserSpec", b =>
                {
                    b.HasOne("EMS.Data.Model.Technology", "Tech")
                        .WithMany("UserSpec")
                        .HasForeignKey("TechId")
                        .HasConstraintName("FK_User_Spec_Technology");

                    b.HasOne("EMS.Data.Model.UserLogin", "U")
                        .WithMany("UserSpec")
                        .HasForeignKey("Uid")
                        .HasConstraintName("FK_User_Spec_UserLogin");
                });

            modelBuilder.Entity("EMS.Data.Model.UserTech", b =>
                {
                    b.HasOne("EMS.Data.Model.Technology", "Tech")
                        .WithMany("UserTech")
                        .HasForeignKey("TechId")
                        .HasConstraintName("FK_User_Tech_Project");

                    b.HasOne("EMS.Data.Model.UserLogin", "U")
                        .WithMany("UserTech")
                        .HasForeignKey("Uid")
                        .HasConstraintName("FK_User_Tech_UserLogin");
                });

            modelBuilder.Entity("EMS.Data.Model.UserTimeSheet", b =>
                {
                    b.HasOne("EMS.Data.Model.Project", "Project")
                        .WithMany("UserTimeSheet")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_Project_UserTimeSheet");

                    b.HasOne("EMS.Data.Model.UserLogin", "ReviewedByU")
                        .WithMany("UserTimeSheetReviewedByU")
                        .HasForeignKey("ReviewedByUid")
                        .HasConstraintName("FK__UserTimeS__Revie__4B6D135E");

                    b.HasOne("EMS.Data.Model.UserLogin", "U")
                        .WithMany("UserTimeSheetU")
                        .HasForeignKey("Uid")
                        .HasConstraintName("FK_UserLogin_UserTimeSheet");

                    b.HasOne("EMS.Data.Model.VirtualDeveloper", "VirtualDeveloper")
                        .WithMany("UserTimeSheet")
                        .HasForeignKey("VirtualDeveloperId")
                        .HasConstraintName("FK_VirtualDeveloper_UserTimeSheet");
                });
#pragma warning restore 612, 618
        }
    }
}
